{"componentChunkName":"component---node-modules-philpl-gatsby-theme-mdx-deck-src-templates-deck-js","path":"/","matchPath":"/*","result":{"data":{"deck":{"id":"59c4a715-a45d-5dd7-905f-ebfbb61f1674","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = customTheme;\nvar _frontmatter = {};\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(L.Column, {\n    sx: {\n      minHeight: '60%',\n      ml: 5\n    }\n  }, mdx(\"h1\", null, \"Testes e2e com Spring boot\"), mdx(L.Column, {\n    sx: {\n      fontSize: \".5em\",\n      width: \"140%\"\n    }\n  }, mdx(\"h2\", null, \"Escrevendo software confi\\xE1vel com testes\")), mdx(L.Column, null, mdx(\"h3\", null, \"By \", mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"Wellington Gustavo Macedo\")))), mdx(\"hr\", null), mdx(L.Column, null, mdx(\"h1\", null, \"The speaker\"), mdx(\"div\", {\n    style: {\n      display: \"flex\"\n    }\n  }, mdx(\"img\", {\n    src: Perfil,\n    style: {\n      height: \"220px\",\n      borderRadius: \"10px\"\n    }\n  }), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ex Javeiro, Atual Kotlinzeiro\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Desenvolvedor do Mercado Livre\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ama codar\"))), mdx(\"div\", {\n    style: {\n      width: \"100%\",\n      display: \"flex\",\n      \"justifyContent\": \"flex-end\"\n    }\n  }, mdx(\"a\", {\n    href: \"https://github.com/wellington3110\",\n    target: \"_blank\",\n    style: {\n      cursor: \"pointer\",\n      color: \"black\"\n    }\n  }, mdx(FaGithub, {\n    style: {\n      \"fontSize\": \"30px\",\n      \"marginRight\": \"5px\"\n    },\n    mdxType: \"FaGithub\"\n  })), mdx(\"a\", {\n    href: \"https://www.linkedin.com/in/wgmacedo/\",\n    target: \"_blank\",\n    style: {\n      cursor: \"pointer\"\n    }\n  }, mdx(FaLinkedinIn, {\n    style: {\n      \"fontSize\": \"30px\",\n      color: \"rgb(0, 127, 177)\",\n      \"marginRight\": \"5px\"\n    },\n    mdxType: \"FaLinkedinIn\"\n  })), mdx(\"a\", {\n    href: \"mailto:wellingtongustavomacedo@gmail.com\",\n    target: \"_blank\",\n    style: {\n      cursor: \"pointer\"\n    }\n  }, mdx(SiGmail, {\n    style: {\n      \"fontSize\": \"30px\",\n      color: \"red\"\n    },\n    mdxType: \"SiGmail\"\n  })))), mdx(\"hr\", null), mdx(L.Column, null, mdx(\"h2\", null, \"Sobre esse workshop\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ser\\xE1 testado uma \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"aplica\\xE7\\xE3o rest\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A stack do \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"spring \\xE9 fortemente usada\"), \", ent\\xE3o \\xE9 um pr\\xE9-requisito para entender os exemplos!\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sinta-se a vontade para \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"perguntar a qualquer momento!\")))), mdx(\"hr\", null), mdx(\"h2\", null, \"O que \\xE9 teste e2e?\"), mdx(L.Column, {\n    sx: {\n      \"alignItems\": \"center\"\n    }\n  }, mdx(\"img\", {\n    style: {\n      height: \"100%\",\n      position: \"relative\",\n      right: \"60px\"\n    },\n    src: Thinking\n  })), mdx(\"hr\", null), mdx(\"h2\", null, \"Fluxo de request\"), mdx(L.Row, {\n    sx: {\n      \"justifyContent\": \"flex-start\",\n      \"top\": \"-15px\"\n    }\n  }, mdx(ZoomSteps, {\n    mdxType: \"ZoomSteps\"\n  }, mdx(Request, {\n    mdxType: \"Request\"\n  }), mdx(RightArrow, {\n    mdxType: \"RightArrow\"\n  }), mdx(Controller, {\n    mdxType: \"Controller\"\n  }), mdx(RightArrow, {\n    mdxType: \"RightArrow\"\n  }), mdx(Gears, {\n    mdxType: \"Gears\"\n  }), mdx(RightArrow, {\n    mdxType: \"RightArrow\"\n  }), mdx(Database, {\n    mdxType: \"Database\"\n  }))), mdx(\"hr\", null), mdx(\"h2\", null, \"Fluxo de response\"), mdx(L.Row, {\n    sx: {\n      \"justifyContent\": \"flex-start\",\n      \"top\": \"-15px\"\n    }\n  }, mdx(ZoomSteps, {\n    mdxType: \"ZoomSteps\"\n  }, mdx(Database, {\n    mdxType: \"Database\"\n  }), mdx(RightArrow, {\n    mdxType: \"RightArrow\"\n  }), mdx(Gears, {\n    mdxType: \"Gears\"\n  }), mdx(RightArrow, {\n    mdxType: \"RightArrow\"\n  }), mdx(Controller, {\n    mdxType: \"Controller\"\n  }), mdx(RightArrow, {\n    mdxType: \"RightArrow\"\n  }), mdx(Request, {\n    mdxType: \"Request\"\n  }))), mdx(\"hr\", null), mdx(Background, {\n    mdxType: \"Background\"\n  }), mdx(L.Row, null, mdx(Attention, {\n    style: {\n      height: \"200px\"\n    },\n    mdxType: \"Attention\"\n  }), mdx(\"h3\", null, \"E porque testes e2e s\\xE3o importantes?\")), mdx(\"hr\", null), mdx(L.Column, null, mdx(\"h2\", null, \"Reproduz o funcionamento real da aplica\\xE7\\xE3o\")), mdx(\"hr\", null), mdx(L.Column, {\n    sx: {\n      \"alignItems\": \"center\"\n    }\n  }, mdx(\"h1\", null, \"M\\xE3os \\xE0 obra\"), mdx(Developer, {\n    style: {\n      height: \"170px\"\n    },\n    mdxType: \"Developer\"\n  })), mdx(\"hr\", null), mdx(L.Column, null, mdx(\"h2\", null, \"Ferramentas utilizadas\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Spring boot\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Mockito\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Faker\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Spring data \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"H2 Database\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Bean validator\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"JUnit\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lombok\"))), mdx(\"hr\", null), mdx(L.Column, {\n    sx: {\n      \"alignItems\": \"center\"\n    }\n  }, mdx(\"h1\", null, \"DTOs\"), mdx(DTO, {\n    style: {\n      height: \"170px\"\n    },\n    mdxType: \"DTO\"\n  })), mdx(\"hr\", null), mdx(Surfer, {\n    mdxType: \"Surfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"@Data\\n@With\\n@AllArgsConstructor\\n@NoArgsConstructor\\npublic class CreateUserDTO {\\n\\n    private String cpf;\\n    private String name;\\n    private String email;\\n    private String address;\\n    private LocalDate birthDate;\\n\\n    public UserEntity toEntity() {\\n        return new UserEntity()\\n            .setCpf(cpf)\\n            .setName(name)\\n            .setEmail(email)\\n            .setAddress(address)\\n            .setBirthDate(birthDate);\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"@Data\\npublic class UserDTO {\\n\\n    private Long id;\\n    private String cpf;\\n    private String name;\\n    private String email;\\n    private String address;\\n    private LocalDate birthDate;\\n\\n    public static UserDTO fromEntity(UserEntity entity) {\\n        return new UserDTO()\\n            .setId(entity.getId())\\n            .setCpf(entity.getCpf())\\n            .setName(entity.getName())\\n            .setBirthDate(entity.getBirthDate())\\n            .setAddress(entity.getAddress())\\n            .setEmail(entity.getEmail());\\n    }\\n\\n    public static UserDTO fromDTO(CreateUserDTO dto, Long id) {\\n        return new UserDTO()\\n            .setId(id)\\n            .setCpf(dto.getCpf())\\n            .setName(dto.getName())\\n            .setBirthDate(dto.getBirthDate())\\n            .setAddress(dto.getAddress())\\n            .setEmail(dto.getEmail());\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"@Data\\n@NoArgsConstructor\\npublic class ErrorDTO {\\n\\n    private String code;\\n    private Map<String, String> causes = new HashMap<>();\\n\\n    public ErrorDTO(String code, List<ErrorCause> errorCauses) {\\n        this.code = code;\\n        this.causes = errorCauses.stream().collect(toMap(ErrorCause::field, ErrorCause::cause));\\n    }\\n\\n    public ErrorDTO addError(String field, String cause) {\\n        causes.put(field, cause);\\n        return this;\\n    }\\n}\\n\"))), mdx(\"hr\", null), mdx(L.Column, {\n    sx: {\n      \"alignItems\": \"center\"\n    }\n  }, mdx(\"h1\", null, \"Controller\"), mdx(Controller, {\n    showLegend: false,\n    style: {\n      height: \"170px\"\n    },\n    mdxType: \"Controller\"\n  })), mdx(\"hr\", null), mdx(Surfer, {\n    mdxType: \"Surfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"1:3 file=\\\"../codes/initial/Controller.java\\\"\",\n    \"1:3\": true,\n    \"file\": \"\\\"../codes/initial/Controller.java\\\"\"\n  }), \"@RestController\\n@RequestMapping(UserController.RESOURCE)\\npublic class UserController {\\n\\n    private final UserService userService;\\n    static final String RESOURCE = \\\"/user\\\";\\n\\n    @Autowired\\n    public UserController(UserService userService) {\\n        this.userService = userService;\\n    }\\n\\n    @PostMapping\\n    public ResponseEntity<Void> save(@RequestBody CreateUserDTO dto) {\\n        UserEntity savedUser = userService.save(dto.toEntity());\\n        return ResponseEntity\\n            .created(URI.create(RESOURCE + \\\"/\\\" + savedUser.getId()))\\n            .header(\\\"Location-id\\\", savedUser.getId().toString())\\n            .build();\\n    }\\n\\n    @GetMapping(\\\"/{id}\\\")\\n    public ResponseEntity<UserDTO> getById(@PathVariable(\\\"id\\\") Long id) {\\n        Optional<UserEntity> user = userService.getById(id);\\n        return user\\n            .map(UserDTO::fromEntity)\\n            .map(ResponseEntity::ok)\\n            .orElse(ResponseEntity.notFound().build());\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"5:6 file=\\\"../codes/initial/Controller.java\\\"\",\n    \"5:6\": true,\n    \"file\": \"\\\"../codes/initial/Controller.java\\\"\"\n  }), \"@RestController\\n@RequestMapping(UserController.RESOURCE)\\npublic class UserController {\\n\\n    private final UserService userService;\\n    static final String RESOURCE = \\\"/user\\\";\\n\\n    @Autowired\\n    public UserController(UserService userService) {\\n        this.userService = userService;\\n    }\\n\\n    @PostMapping\\n    public ResponseEntity<Void> save(@RequestBody CreateUserDTO dto) {\\n        UserEntity savedUser = userService.save(dto.toEntity());\\n        return ResponseEntity\\n            .created(URI.create(RESOURCE + \\\"/\\\" + savedUser.getId()))\\n            .header(\\\"Location-id\\\", savedUser.getId().toString())\\n            .build();\\n    }\\n\\n    @GetMapping(\\\"/{id}\\\")\\n    public ResponseEntity<UserDTO> getById(@PathVariable(\\\"id\\\") Long id) {\\n        Optional<UserEntity> user = userService.getById(id);\\n        return user\\n            .map(UserDTO::fromEntity)\\n            .map(ResponseEntity::ok)\\n            .orElse(ResponseEntity.notFound().build());\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"13:14 file=\\\"../codes/initial/Controller.java\\\" title='Endpoint para criar novos usuários'\",\n    \"13:14\": true,\n    \"file\": \"\\\"../codes/initial/Controller.java\\\"\",\n    \"title\": \"'Endpoint\",\n    \"para\": true,\n    \"criar\": true,\n    \"novos\": true,\n    \"usuários'\": true\n  }), \"@RestController\\n@RequestMapping(UserController.RESOURCE)\\npublic class UserController {\\n\\n    private final UserService userService;\\n    static final String RESOURCE = \\\"/user\\\";\\n\\n    @Autowired\\n    public UserController(UserService userService) {\\n        this.userService = userService;\\n    }\\n\\n    @PostMapping\\n    public ResponseEntity<Void> save(@RequestBody CreateUserDTO dto) {\\n        UserEntity savedUser = userService.save(dto.toEntity());\\n        return ResponseEntity\\n            .created(URI.create(RESOURCE + \\\"/\\\" + savedUser.getId()))\\n            .header(\\\"Location-id\\\", savedUser.getId().toString())\\n            .build();\\n    }\\n\\n    @GetMapping(\\\"/{id}\\\")\\n    public ResponseEntity<UserDTO> getById(@PathVariable(\\\"id\\\") Long id) {\\n        Optional<UserEntity> user = userService.getById(id);\\n        return user\\n            .map(UserDTO::fromEntity)\\n            .map(ResponseEntity::ok)\\n            .orElse(ResponseEntity.notFound().build());\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"15\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"15 file=\\\"../codes/initial/Controller.java\\\"\",\n    \"file\": \"\\\"../codes/initial/Controller.java\\\"\"\n  }), \"@RestController\\n@RequestMapping(UserController.RESOURCE)\\npublic class UserController {\\n\\n    private final UserService userService;\\n    static final String RESOURCE = \\\"/user\\\";\\n\\n    @Autowired\\n    public UserController(UserService userService) {\\n        this.userService = userService;\\n    }\\n\\n    @PostMapping\\n    public ResponseEntity<Void> save(@RequestBody CreateUserDTO dto) {\\n        UserEntity savedUser = userService.save(dto.toEntity());\\n        return ResponseEntity\\n            .created(URI.create(RESOURCE + \\\"/\\\" + savedUser.getId()))\\n            .header(\\\"Location-id\\\", savedUser.getId().toString())\\n            .build();\\n    }\\n\\n    @GetMapping(\\\"/{id}\\\")\\n    public ResponseEntity<UserDTO> getById(@PathVariable(\\\"id\\\") Long id) {\\n        Optional<UserEntity> user = userService.getById(id);\\n        return user\\n            .map(UserDTO::fromEntity)\\n            .map(ResponseEntity::ok)\\n            .orElse(ResponseEntity.notFound().build());\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"16:17 file=\\\"../codes/initial/Controller.java\\\" title='O header ficará: \\\"Location: user/{id}\\\"'\",\n    \"16:17\": true,\n    \"file\": \"\\\"../codes/initial/Controller.java\\\"\",\n    \"title\": \"'O\",\n    \"header\": true,\n    \"ficará:\": true,\n    \"\\\"Location:\": true,\n    \"user/{id}\\\"'\": true\n  }), \"@RestController\\n@RequestMapping(UserController.RESOURCE)\\npublic class UserController {\\n\\n    private final UserService userService;\\n    static final String RESOURCE = \\\"/user\\\";\\n\\n    @Autowired\\n    public UserController(UserService userService) {\\n        this.userService = userService;\\n    }\\n\\n    @PostMapping\\n    public ResponseEntity<Void> save(@RequestBody CreateUserDTO dto) {\\n        UserEntity savedUser = userService.save(dto.toEntity());\\n        return ResponseEntity\\n            .created(URI.create(RESOURCE + \\\"/\\\" + savedUser.getId()))\\n            .header(\\\"Location-id\\\", savedUser.getId().toString())\\n            .build();\\n    }\\n\\n    @GetMapping(\\\"/{id}\\\")\\n    public ResponseEntity<UserDTO> getById(@PathVariable(\\\"id\\\") Long id) {\\n        Optional<UserEntity> user = userService.getById(id);\\n        return user\\n            .map(UserDTO::fromEntity)\\n            .map(ResponseEntity::ok)\\n            .orElse(ResponseEntity.notFound().build());\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"18\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"18 file=\\\"../codes/initial/Controller.java\\\" title='O header ficará: \\\"Location-Id: {id}\\\"'\",\n    \"file\": \"\\\"../codes/initial/Controller.java\\\"\",\n    \"title\": \"'O\",\n    \"header\": true,\n    \"ficará:\": true,\n    \"\\\"Location-Id:\": true,\n    \"{id}\\\"'\": true\n  }), \"@RestController\\n@RequestMapping(UserController.RESOURCE)\\npublic class UserController {\\n\\n    private final UserService userService;\\n    static final String RESOURCE = \\\"/user\\\";\\n\\n    @Autowired\\n    public UserController(UserService userService) {\\n        this.userService = userService;\\n    }\\n\\n    @PostMapping\\n    public ResponseEntity<Void> save(@RequestBody CreateUserDTO dto) {\\n        UserEntity savedUser = userService.save(dto.toEntity());\\n        return ResponseEntity\\n            .created(URI.create(RESOURCE + \\\"/\\\" + savedUser.getId()))\\n            .header(\\\"Location-id\\\", savedUser.getId().toString())\\n            .build();\\n    }\\n\\n    @GetMapping(\\\"/{id}\\\")\\n    public ResponseEntity<UserDTO> getById(@PathVariable(\\\"id\\\") Long id) {\\n        Optional<UserEntity> user = userService.getById(id);\\n        return user\\n            .map(UserDTO::fromEntity)\\n            .map(ResponseEntity::ok)\\n            .orElse(ResponseEntity.notFound().build());\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"22:23 file=\\\"../codes/initial/Controller.java\\\" title='Endpoint para recuperar usuários pelo seu id'\",\n    \"22:23\": true,\n    \"file\": \"\\\"../codes/initial/Controller.java\\\"\",\n    \"title\": \"'Endpoint\",\n    \"para\": true,\n    \"recuperar\": true,\n    \"usuários\": true,\n    \"pelo\": true,\n    \"seu\": true,\n    \"id'\": true\n  }), \"@RestController\\n@RequestMapping(UserController.RESOURCE)\\npublic class UserController {\\n\\n    private final UserService userService;\\n    static final String RESOURCE = \\\"/user\\\";\\n\\n    @Autowired\\n    public UserController(UserService userService) {\\n        this.userService = userService;\\n    }\\n\\n    @PostMapping\\n    public ResponseEntity<Void> save(@RequestBody CreateUserDTO dto) {\\n        UserEntity savedUser = userService.save(dto.toEntity());\\n        return ResponseEntity\\n            .created(URI.create(RESOURCE + \\\"/\\\" + savedUser.getId()))\\n            .header(\\\"Location-id\\\", savedUser.getId().toString())\\n            .build();\\n    }\\n\\n    @GetMapping(\\\"/{id}\\\")\\n    public ResponseEntity<UserDTO> getById(@PathVariable(\\\"id\\\") Long id) {\\n        Optional<UserEntity> user = userService.getById(id);\\n        return user\\n            .map(UserDTO::fromEntity)\\n            .map(ResponseEntity::ok)\\n            .orElse(ResponseEntity.notFound().build());\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"24\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"24 file=\\\"../codes/initial/Controller.java\\\"\",\n    \"file\": \"\\\"../codes/initial/Controller.java\\\"\"\n  }), \"@RestController\\n@RequestMapping(UserController.RESOURCE)\\npublic class UserController {\\n\\n    private final UserService userService;\\n    static final String RESOURCE = \\\"/user\\\";\\n\\n    @Autowired\\n    public UserController(UserService userService) {\\n        this.userService = userService;\\n    }\\n\\n    @PostMapping\\n    public ResponseEntity<Void> save(@RequestBody CreateUserDTO dto) {\\n        UserEntity savedUser = userService.save(dto.toEntity());\\n        return ResponseEntity\\n            .created(URI.create(RESOURCE + \\\"/\\\" + savedUser.getId()))\\n            .header(\\\"Location-id\\\", savedUser.getId().toString())\\n            .build();\\n    }\\n\\n    @GetMapping(\\\"/{id}\\\")\\n    public ResponseEntity<UserDTO> getById(@PathVariable(\\\"id\\\") Long id) {\\n        Optional<UserEntity> user = userService.getById(id);\\n        return user\\n            .map(UserDTO::fromEntity)\\n            .map(ResponseEntity::ok)\\n            .orElse(ResponseEntity.notFound().build());\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"25:26 file=\\\"../codes/initial/Controller.java\\\"\",\n    \"25:26\": true,\n    \"file\": \"\\\"../codes/initial/Controller.java\\\"\"\n  }), \"@RestController\\n@RequestMapping(UserController.RESOURCE)\\npublic class UserController {\\n\\n    private final UserService userService;\\n    static final String RESOURCE = \\\"/user\\\";\\n\\n    @Autowired\\n    public UserController(UserService userService) {\\n        this.userService = userService;\\n    }\\n\\n    @PostMapping\\n    public ResponseEntity<Void> save(@RequestBody CreateUserDTO dto) {\\n        UserEntity savedUser = userService.save(dto.toEntity());\\n        return ResponseEntity\\n            .created(URI.create(RESOURCE + \\\"/\\\" + savedUser.getId()))\\n            .header(\\\"Location-id\\\", savedUser.getId().toString())\\n            .build();\\n    }\\n\\n    @GetMapping(\\\"/{id}\\\")\\n    public ResponseEntity<UserDTO> getById(@PathVariable(\\\"id\\\") Long id) {\\n        Optional<UserEntity> user = userService.getById(id);\\n        return user\\n            .map(UserDTO::fromEntity)\\n            .map(ResponseEntity::ok)\\n            .orElse(ResponseEntity.notFound().build());\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"27\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"27 file=\\\"../codes/initial/Controller.java\\\"\",\n    \"file\": \"\\\"../codes/initial/Controller.java\\\"\"\n  }), \"@RestController\\n@RequestMapping(UserController.RESOURCE)\\npublic class UserController {\\n\\n    private final UserService userService;\\n    static final String RESOURCE = \\\"/user\\\";\\n\\n    @Autowired\\n    public UserController(UserService userService) {\\n        this.userService = userService;\\n    }\\n\\n    @PostMapping\\n    public ResponseEntity<Void> save(@RequestBody CreateUserDTO dto) {\\n        UserEntity savedUser = userService.save(dto.toEntity());\\n        return ResponseEntity\\n            .created(URI.create(RESOURCE + \\\"/\\\" + savedUser.getId()))\\n            .header(\\\"Location-id\\\", savedUser.getId().toString())\\n            .build();\\n    }\\n\\n    @GetMapping(\\\"/{id}\\\")\\n    public ResponseEntity<UserDTO> getById(@PathVariable(\\\"id\\\") Long id) {\\n        Optional<UserEntity> user = userService.getById(id);\\n        return user\\n            .map(UserDTO::fromEntity)\\n            .map(ResponseEntity::ok)\\n            .orElse(ResponseEntity.notFound().build());\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"28\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"28 file=\\\"../codes/initial/Controller.java\\\"\",\n    \"file\": \"\\\"../codes/initial/Controller.java\\\"\"\n  }), \"@RestController\\n@RequestMapping(UserController.RESOURCE)\\npublic class UserController {\\n\\n    private final UserService userService;\\n    static final String RESOURCE = \\\"/user\\\";\\n\\n    @Autowired\\n    public UserController(UserService userService) {\\n        this.userService = userService;\\n    }\\n\\n    @PostMapping\\n    public ResponseEntity<Void> save(@RequestBody CreateUserDTO dto) {\\n        UserEntity savedUser = userService.save(dto.toEntity());\\n        return ResponseEntity\\n            .created(URI.create(RESOURCE + \\\"/\\\" + savedUser.getId()))\\n            .header(\\\"Location-id\\\", savedUser.getId().toString())\\n            .build();\\n    }\\n\\n    @GetMapping(\\\"/{id}\\\")\\n    public ResponseEntity<UserDTO> getById(@PathVariable(\\\"id\\\") Long id) {\\n        Optional<UserEntity> user = userService.getById(id);\\n        return user\\n            .map(UserDTO::fromEntity)\\n            .map(ResponseEntity::ok)\\n            .orElse(ResponseEntity.notFound().build());\\n    }\\n}\\n\"))), mdx(\"hr\", null), mdx(L.Column, {\n    sx: {\n      \"alignItems\": \"center\"\n    }\n  }, mdx(\"h1\", null, \"Service\"), mdx(Gears, {\n    showLegend: false,\n    style: {\n      height: \"170px\"\n    },\n    mdxType: \"Gears\"\n  })), mdx(\"hr\", null), mdx(Surfer, {\n    mdxType: \"Surfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"1:2 file=\\\"../codes/initial/Service.java\\\"\",\n    \"1:2\": true,\n    \"file\": \"\\\"../codes/initial/Service.java\\\"\"\n  }), \"@Service\\npublic class UserService {\\n\\n    private final UserRepository userRepository;\\n\\n    @Autowired\\n    public UserService(UserRepository userRepository) {\\n        this.userRepository = userRepository;\\n    }\\n\\n    public UserEntity save(UserEntity userEntity) {\\n        validate(userEntity);\\n        return userRepository.save(userEntity);\\n    }\\n\\n    private void validate(UserEntity userEntity) {\\n        List<ErrorCause> errorCauses = new UserValidator()\\n            .birthDate(userEntity.getBirthDate())\\n            .name(userEntity.getName())\\n            .cpf(userEntity.getCpf())\\n            .email(userEntity.getEmail())\\n            .address(userEntity.getAddress())\\n            .validate();\\n        Optional<ErrorCause> cpfError = validateUniqueCPF(userEntity.getCpf());\\n        cpfError.ifPresent(errorCauses::add);\\n        if (!errorCauses.isEmpty()) {\\n            throw new ValidationException(errorCauses);\\n        }\\n    }\\n\\n    private Optional<ErrorCause> validateUniqueCPF(String cpf) {\\n        if (userRepository.existsByCpf(cpf)) {\\n            return Optional.of(new ErrorCause(\\\"cpf\\\", VALUE_ALREADY_REGISTERED));\\n        }\\n        return Optional.empty();\\n    }\\n\\n    public Optional<UserEntity> getById(Long id) {\\n        return userRepository.findById(id);\\n    }\\n\\n    @Data\\n    @Accessors(fluent = true, chain = true)\\n    private static class UserValidator extends DataValidator {\\n\\n        @NotBlank\\n        @Size(min = 3, max = 90)\\n        private String name;\\n\\n        @NotNull\\n        @PastOrPresent\\n        private LocalDate birthDate;\\n\\n        @CPF\\n        @NotNull\\n        private String cpf;\\n\\n        @Email\\n        private String email;\\n\\n        @Size(min = 5, max = 254)\\n        private String address;\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"4\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"4 file=\\\"../codes/initial/Service.java\\\"\",\n    \"file\": \"\\\"../codes/initial/Service.java\\\"\"\n  }), \"@Service\\npublic class UserService {\\n\\n    private final UserRepository userRepository;\\n\\n    @Autowired\\n    public UserService(UserRepository userRepository) {\\n        this.userRepository = userRepository;\\n    }\\n\\n    public UserEntity save(UserEntity userEntity) {\\n        validate(userEntity);\\n        return userRepository.save(userEntity);\\n    }\\n\\n    private void validate(UserEntity userEntity) {\\n        List<ErrorCause> errorCauses = new UserValidator()\\n            .birthDate(userEntity.getBirthDate())\\n            .name(userEntity.getName())\\n            .cpf(userEntity.getCpf())\\n            .email(userEntity.getEmail())\\n            .address(userEntity.getAddress())\\n            .validate();\\n        Optional<ErrorCause> cpfError = validateUniqueCPF(userEntity.getCpf());\\n        cpfError.ifPresent(errorCauses::add);\\n        if (!errorCauses.isEmpty()) {\\n            throw new ValidationException(errorCauses);\\n        }\\n    }\\n\\n    private Optional<ErrorCause> validateUniqueCPF(String cpf) {\\n        if (userRepository.existsByCpf(cpf)) {\\n            return Optional.of(new ErrorCause(\\\"cpf\\\", VALUE_ALREADY_REGISTERED));\\n        }\\n        return Optional.empty();\\n    }\\n\\n    public Optional<UserEntity> getById(Long id) {\\n        return userRepository.findById(id);\\n    }\\n\\n    @Data\\n    @Accessors(fluent = true, chain = true)\\n    private static class UserValidator extends DataValidator {\\n\\n        @NotBlank\\n        @Size(min = 3, max = 90)\\n        private String name;\\n\\n        @NotNull\\n        @PastOrPresent\\n        private LocalDate birthDate;\\n\\n        @CPF\\n        @NotNull\\n        private String cpf;\\n\\n        @Email\\n        private String email;\\n\\n        @Size(min = 5, max = 254)\\n        private String address;\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"11:14 file=\\\"../codes/initial/Service.java\\\"\",\n    \"11:14\": true,\n    \"file\": \"\\\"../codes/initial/Service.java\\\"\"\n  }), \"@Service\\npublic class UserService {\\n\\n    private final UserRepository userRepository;\\n\\n    @Autowired\\n    public UserService(UserRepository userRepository) {\\n        this.userRepository = userRepository;\\n    }\\n\\n    public UserEntity save(UserEntity userEntity) {\\n        validate(userEntity);\\n        return userRepository.save(userEntity);\\n    }\\n\\n    private void validate(UserEntity userEntity) {\\n        List<ErrorCause> errorCauses = new UserValidator()\\n            .birthDate(userEntity.getBirthDate())\\n            .name(userEntity.getName())\\n            .cpf(userEntity.getCpf())\\n            .email(userEntity.getEmail())\\n            .address(userEntity.getAddress())\\n            .validate();\\n        Optional<ErrorCause> cpfError = validateUniqueCPF(userEntity.getCpf());\\n        cpfError.ifPresent(errorCauses::add);\\n        if (!errorCauses.isEmpty()) {\\n            throw new ValidationException(errorCauses);\\n        }\\n    }\\n\\n    private Optional<ErrorCause> validateUniqueCPF(String cpf) {\\n        if (userRepository.existsByCpf(cpf)) {\\n            return Optional.of(new ErrorCause(\\\"cpf\\\", VALUE_ALREADY_REGISTERED));\\n        }\\n        return Optional.empty();\\n    }\\n\\n    public Optional<UserEntity> getById(Long id) {\\n        return userRepository.findById(id);\\n    }\\n\\n    @Data\\n    @Accessors(fluent = true, chain = true)\\n    private static class UserValidator extends DataValidator {\\n\\n        @NotBlank\\n        @Size(min = 3, max = 90)\\n        private String name;\\n\\n        @NotNull\\n        @PastOrPresent\\n        private LocalDate birthDate;\\n\\n        @CPF\\n        @NotNull\\n        private String cpf;\\n\\n        @Email\\n        private String email;\\n\\n        @Size(min = 5, max = 254)\\n        private String address;\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"12\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"12 file=\\\"../codes/initial/Service.java\\\"\",\n    \"file\": \"\\\"../codes/initial/Service.java\\\"\"\n  }), \"@Service\\npublic class UserService {\\n\\n    private final UserRepository userRepository;\\n\\n    @Autowired\\n    public UserService(UserRepository userRepository) {\\n        this.userRepository = userRepository;\\n    }\\n\\n    public UserEntity save(UserEntity userEntity) {\\n        validate(userEntity);\\n        return userRepository.save(userEntity);\\n    }\\n\\n    private void validate(UserEntity userEntity) {\\n        List<ErrorCause> errorCauses = new UserValidator()\\n            .birthDate(userEntity.getBirthDate())\\n            .name(userEntity.getName())\\n            .cpf(userEntity.getCpf())\\n            .email(userEntity.getEmail())\\n            .address(userEntity.getAddress())\\n            .validate();\\n        Optional<ErrorCause> cpfError = validateUniqueCPF(userEntity.getCpf());\\n        cpfError.ifPresent(errorCauses::add);\\n        if (!errorCauses.isEmpty()) {\\n            throw new ValidationException(errorCauses);\\n        }\\n    }\\n\\n    private Optional<ErrorCause> validateUniqueCPF(String cpf) {\\n        if (userRepository.existsByCpf(cpf)) {\\n            return Optional.of(new ErrorCause(\\\"cpf\\\", VALUE_ALREADY_REGISTERED));\\n        }\\n        return Optional.empty();\\n    }\\n\\n    public Optional<UserEntity> getById(Long id) {\\n        return userRepository.findById(id);\\n    }\\n\\n    @Data\\n    @Accessors(fluent = true, chain = true)\\n    private static class UserValidator extends DataValidator {\\n\\n        @NotBlank\\n        @Size(min = 3, max = 90)\\n        private String name;\\n\\n        @NotNull\\n        @PastOrPresent\\n        private LocalDate birthDate;\\n\\n        @CPF\\n        @NotNull\\n        private String cpf;\\n\\n        @Email\\n        private String email;\\n\\n        @Size(min = 5, max = 254)\\n        private String address;\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"16:29 file=\\\"../codes/initial/Service.java\\\"\",\n    \"16:29\": true,\n    \"file\": \"\\\"../codes/initial/Service.java\\\"\"\n  }), \"@Service\\npublic class UserService {\\n\\n    private final UserRepository userRepository;\\n\\n    @Autowired\\n    public UserService(UserRepository userRepository) {\\n        this.userRepository = userRepository;\\n    }\\n\\n    public UserEntity save(UserEntity userEntity) {\\n        validate(userEntity);\\n        return userRepository.save(userEntity);\\n    }\\n\\n    private void validate(UserEntity userEntity) {\\n        List<ErrorCause> errorCauses = new UserValidator()\\n            .birthDate(userEntity.getBirthDate())\\n            .name(userEntity.getName())\\n            .cpf(userEntity.getCpf())\\n            .email(userEntity.getEmail())\\n            .address(userEntity.getAddress())\\n            .validate();\\n        Optional<ErrorCause> cpfError = validateUniqueCPF(userEntity.getCpf());\\n        cpfError.ifPresent(errorCauses::add);\\n        if (!errorCauses.isEmpty()) {\\n            throw new ValidationException(errorCauses);\\n        }\\n    }\\n\\n    private Optional<ErrorCause> validateUniqueCPF(String cpf) {\\n        if (userRepository.existsByCpf(cpf)) {\\n            return Optional.of(new ErrorCause(\\\"cpf\\\", VALUE_ALREADY_REGISTERED));\\n        }\\n        return Optional.empty();\\n    }\\n\\n    public Optional<UserEntity> getById(Long id) {\\n        return userRepository.findById(id);\\n    }\\n\\n    @Data\\n    @Accessors(fluent = true, chain = true)\\n    private static class UserValidator extends DataValidator {\\n\\n        @NotBlank\\n        @Size(min = 3, max = 90)\\n        private String name;\\n\\n        @NotNull\\n        @PastOrPresent\\n        private LocalDate birthDate;\\n\\n        @CPF\\n        @NotNull\\n        private String cpf;\\n\\n        @Email\\n        private String email;\\n\\n        @Size(min = 5, max = 254)\\n        private String address;\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"17:23 file=\\\"../codes/initial/Service.java\\\"\",\n    \"17:23\": true,\n    \"file\": \"\\\"../codes/initial/Service.java\\\"\"\n  }), \"@Service\\npublic class UserService {\\n\\n    private final UserRepository userRepository;\\n\\n    @Autowired\\n    public UserService(UserRepository userRepository) {\\n        this.userRepository = userRepository;\\n    }\\n\\n    public UserEntity save(UserEntity userEntity) {\\n        validate(userEntity);\\n        return userRepository.save(userEntity);\\n    }\\n\\n    private void validate(UserEntity userEntity) {\\n        List<ErrorCause> errorCauses = new UserValidator()\\n            .birthDate(userEntity.getBirthDate())\\n            .name(userEntity.getName())\\n            .cpf(userEntity.getCpf())\\n            .email(userEntity.getEmail())\\n            .address(userEntity.getAddress())\\n            .validate();\\n        Optional<ErrorCause> cpfError = validateUniqueCPF(userEntity.getCpf());\\n        cpfError.ifPresent(errorCauses::add);\\n        if (!errorCauses.isEmpty()) {\\n            throw new ValidationException(errorCauses);\\n        }\\n    }\\n\\n    private Optional<ErrorCause> validateUniqueCPF(String cpf) {\\n        if (userRepository.existsByCpf(cpf)) {\\n            return Optional.of(new ErrorCause(\\\"cpf\\\", VALUE_ALREADY_REGISTERED));\\n        }\\n        return Optional.empty();\\n    }\\n\\n    public Optional<UserEntity> getById(Long id) {\\n        return userRepository.findById(id);\\n    }\\n\\n    @Data\\n    @Accessors(fluent = true, chain = true)\\n    private static class UserValidator extends DataValidator {\\n\\n        @NotBlank\\n        @Size(min = 3, max = 90)\\n        private String name;\\n\\n        @NotNull\\n        @PastOrPresent\\n        private LocalDate birthDate;\\n\\n        @CPF\\n        @NotNull\\n        private String cpf;\\n\\n        @Email\\n        private String email;\\n\\n        @Size(min = 5, max = 254)\\n        private String address;\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"44:62 file=\\\"../codes/initial/Service.java\\\"\",\n    \"44:62\": true,\n    \"file\": \"\\\"../codes/initial/Service.java\\\"\"\n  }), \"@Service\\npublic class UserService {\\n\\n    private final UserRepository userRepository;\\n\\n    @Autowired\\n    public UserService(UserRepository userRepository) {\\n        this.userRepository = userRepository;\\n    }\\n\\n    public UserEntity save(UserEntity userEntity) {\\n        validate(userEntity);\\n        return userRepository.save(userEntity);\\n    }\\n\\n    private void validate(UserEntity userEntity) {\\n        List<ErrorCause> errorCauses = new UserValidator()\\n            .birthDate(userEntity.getBirthDate())\\n            .name(userEntity.getName())\\n            .cpf(userEntity.getCpf())\\n            .email(userEntity.getEmail())\\n            .address(userEntity.getAddress())\\n            .validate();\\n        Optional<ErrorCause> cpfError = validateUniqueCPF(userEntity.getCpf());\\n        cpfError.ifPresent(errorCauses::add);\\n        if (!errorCauses.isEmpty()) {\\n            throw new ValidationException(errorCauses);\\n        }\\n    }\\n\\n    private Optional<ErrorCause> validateUniqueCPF(String cpf) {\\n        if (userRepository.existsByCpf(cpf)) {\\n            return Optional.of(new ErrorCause(\\\"cpf\\\", VALUE_ALREADY_REGISTERED));\\n        }\\n        return Optional.empty();\\n    }\\n\\n    public Optional<UserEntity> getById(Long id) {\\n        return userRepository.findById(id);\\n    }\\n\\n    @Data\\n    @Accessors(fluent = true, chain = true)\\n    private static class UserValidator extends DataValidator {\\n\\n        @NotBlank\\n        @Size(min = 3, max = 90)\\n        private String name;\\n\\n        @NotNull\\n        @PastOrPresent\\n        private LocalDate birthDate;\\n\\n        @CPF\\n        @NotNull\\n        private String cpf;\\n\\n        @Email\\n        private String email;\\n\\n        @Size(min = 5, max = 254)\\n        private String address;\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"44[40:61] file=\\\"../codes/initial/Service.java\\\" title=\\\"Disponibiliza o método validate\\\"\",\n    \"44[40:61]\": true,\n    \"file\": \"\\\"../codes/initial/Service.java\\\"\",\n    \"title\": \"\\\"Disponibiliza\",\n    \"o\": true,\n    \"método\": true,\n    \"validate\\\"\": true\n  }), \"@Service\\npublic class UserService {\\n\\n    private final UserRepository userRepository;\\n\\n    @Autowired\\n    public UserService(UserRepository userRepository) {\\n        this.userRepository = userRepository;\\n    }\\n\\n    public UserEntity save(UserEntity userEntity) {\\n        validate(userEntity);\\n        return userRepository.save(userEntity);\\n    }\\n\\n    private void validate(UserEntity userEntity) {\\n        List<ErrorCause> errorCauses = new UserValidator()\\n            .birthDate(userEntity.getBirthDate())\\n            .name(userEntity.getName())\\n            .cpf(userEntity.getCpf())\\n            .email(userEntity.getEmail())\\n            .address(userEntity.getAddress())\\n            .validate();\\n        Optional<ErrorCause> cpfError = validateUniqueCPF(userEntity.getCpf());\\n        cpfError.ifPresent(errorCauses::add);\\n        if (!errorCauses.isEmpty()) {\\n            throw new ValidationException(errorCauses);\\n        }\\n    }\\n\\n    private Optional<ErrorCause> validateUniqueCPF(String cpf) {\\n        if (userRepository.existsByCpf(cpf)) {\\n            return Optional.of(new ErrorCause(\\\"cpf\\\", VALUE_ALREADY_REGISTERED));\\n        }\\n        return Optional.empty();\\n    }\\n\\n    public Optional<UserEntity> getById(Long id) {\\n        return userRepository.findById(id);\\n    }\\n\\n    @Data\\n    @Accessors(fluent = true, chain = true)\\n    private static class UserValidator extends DataValidator {\\n\\n        @NotBlank\\n        @Size(min = 3, max = 90)\\n        private String name;\\n\\n        @NotNull\\n        @PastOrPresent\\n        private LocalDate birthDate;\\n\\n        @CPF\\n        @NotNull\\n        private String cpf;\\n\\n        @Email\\n        private String email;\\n\\n        @Size(min = 5, max = 254)\\n        private String address;\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"46:48 file=\\\"../codes/initial/Service.java\\\"\",\n    \"46:48\": true,\n    \"file\": \"\\\"../codes/initial/Service.java\\\"\"\n  }), \"@Service\\npublic class UserService {\\n\\n    private final UserRepository userRepository;\\n\\n    @Autowired\\n    public UserService(UserRepository userRepository) {\\n        this.userRepository = userRepository;\\n    }\\n\\n    public UserEntity save(UserEntity userEntity) {\\n        validate(userEntity);\\n        return userRepository.save(userEntity);\\n    }\\n\\n    private void validate(UserEntity userEntity) {\\n        List<ErrorCause> errorCauses = new UserValidator()\\n            .birthDate(userEntity.getBirthDate())\\n            .name(userEntity.getName())\\n            .cpf(userEntity.getCpf())\\n            .email(userEntity.getEmail())\\n            .address(userEntity.getAddress())\\n            .validate();\\n        Optional<ErrorCause> cpfError = validateUniqueCPF(userEntity.getCpf());\\n        cpfError.ifPresent(errorCauses::add);\\n        if (!errorCauses.isEmpty()) {\\n            throw new ValidationException(errorCauses);\\n        }\\n    }\\n\\n    private Optional<ErrorCause> validateUniqueCPF(String cpf) {\\n        if (userRepository.existsByCpf(cpf)) {\\n            return Optional.of(new ErrorCause(\\\"cpf\\\", VALUE_ALREADY_REGISTERED));\\n        }\\n        return Optional.empty();\\n    }\\n\\n    public Optional<UserEntity> getById(Long id) {\\n        return userRepository.findById(id);\\n    }\\n\\n    @Data\\n    @Accessors(fluent = true, chain = true)\\n    private static class UserValidator extends DataValidator {\\n\\n        @NotBlank\\n        @Size(min = 3, max = 90)\\n        private String name;\\n\\n        @NotNull\\n        @PastOrPresent\\n        private LocalDate birthDate;\\n\\n        @CPF\\n        @NotNull\\n        private String cpf;\\n\\n        @Email\\n        private String email;\\n\\n        @Size(min = 5, max = 254)\\n        private String address;\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"50:52 file=\\\"../codes/initial/Service.java\\\"\",\n    \"50:52\": true,\n    \"file\": \"\\\"../codes/initial/Service.java\\\"\"\n  }), \"@Service\\npublic class UserService {\\n\\n    private final UserRepository userRepository;\\n\\n    @Autowired\\n    public UserService(UserRepository userRepository) {\\n        this.userRepository = userRepository;\\n    }\\n\\n    public UserEntity save(UserEntity userEntity) {\\n        validate(userEntity);\\n        return userRepository.save(userEntity);\\n    }\\n\\n    private void validate(UserEntity userEntity) {\\n        List<ErrorCause> errorCauses = new UserValidator()\\n            .birthDate(userEntity.getBirthDate())\\n            .name(userEntity.getName())\\n            .cpf(userEntity.getCpf())\\n            .email(userEntity.getEmail())\\n            .address(userEntity.getAddress())\\n            .validate();\\n        Optional<ErrorCause> cpfError = validateUniqueCPF(userEntity.getCpf());\\n        cpfError.ifPresent(errorCauses::add);\\n        if (!errorCauses.isEmpty()) {\\n            throw new ValidationException(errorCauses);\\n        }\\n    }\\n\\n    private Optional<ErrorCause> validateUniqueCPF(String cpf) {\\n        if (userRepository.existsByCpf(cpf)) {\\n            return Optional.of(new ErrorCause(\\\"cpf\\\", VALUE_ALREADY_REGISTERED));\\n        }\\n        return Optional.empty();\\n    }\\n\\n    public Optional<UserEntity> getById(Long id) {\\n        return userRepository.findById(id);\\n    }\\n\\n    @Data\\n    @Accessors(fluent = true, chain = true)\\n    private static class UserValidator extends DataValidator {\\n\\n        @NotBlank\\n        @Size(min = 3, max = 90)\\n        private String name;\\n\\n        @NotNull\\n        @PastOrPresent\\n        private LocalDate birthDate;\\n\\n        @CPF\\n        @NotNull\\n        private String cpf;\\n\\n        @Email\\n        private String email;\\n\\n        @Size(min = 5, max = 254)\\n        private String address;\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"54:56 file=\\\"../codes/initial/Service.java\\\"\",\n    \"54:56\": true,\n    \"file\": \"\\\"../codes/initial/Service.java\\\"\"\n  }), \"@Service\\npublic class UserService {\\n\\n    private final UserRepository userRepository;\\n\\n    @Autowired\\n    public UserService(UserRepository userRepository) {\\n        this.userRepository = userRepository;\\n    }\\n\\n    public UserEntity save(UserEntity userEntity) {\\n        validate(userEntity);\\n        return userRepository.save(userEntity);\\n    }\\n\\n    private void validate(UserEntity userEntity) {\\n        List<ErrorCause> errorCauses = new UserValidator()\\n            .birthDate(userEntity.getBirthDate())\\n            .name(userEntity.getName())\\n            .cpf(userEntity.getCpf())\\n            .email(userEntity.getEmail())\\n            .address(userEntity.getAddress())\\n            .validate();\\n        Optional<ErrorCause> cpfError = validateUniqueCPF(userEntity.getCpf());\\n        cpfError.ifPresent(errorCauses::add);\\n        if (!errorCauses.isEmpty()) {\\n            throw new ValidationException(errorCauses);\\n        }\\n    }\\n\\n    private Optional<ErrorCause> validateUniqueCPF(String cpf) {\\n        if (userRepository.existsByCpf(cpf)) {\\n            return Optional.of(new ErrorCause(\\\"cpf\\\", VALUE_ALREADY_REGISTERED));\\n        }\\n        return Optional.empty();\\n    }\\n\\n    public Optional<UserEntity> getById(Long id) {\\n        return userRepository.findById(id);\\n    }\\n\\n    @Data\\n    @Accessors(fluent = true, chain = true)\\n    private static class UserValidator extends DataValidator {\\n\\n        @NotBlank\\n        @Size(min = 3, max = 90)\\n        private String name;\\n\\n        @NotNull\\n        @PastOrPresent\\n        private LocalDate birthDate;\\n\\n        @CPF\\n        @NotNull\\n        private String cpf;\\n\\n        @Email\\n        private String email;\\n\\n        @Size(min = 5, max = 254)\\n        private String address;\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"58:59 file=\\\"../codes/initial/Service.java\\\"\",\n    \"58:59\": true,\n    \"file\": \"\\\"../codes/initial/Service.java\\\"\"\n  }), \"@Service\\npublic class UserService {\\n\\n    private final UserRepository userRepository;\\n\\n    @Autowired\\n    public UserService(UserRepository userRepository) {\\n        this.userRepository = userRepository;\\n    }\\n\\n    public UserEntity save(UserEntity userEntity) {\\n        validate(userEntity);\\n        return userRepository.save(userEntity);\\n    }\\n\\n    private void validate(UserEntity userEntity) {\\n        List<ErrorCause> errorCauses = new UserValidator()\\n            .birthDate(userEntity.getBirthDate())\\n            .name(userEntity.getName())\\n            .cpf(userEntity.getCpf())\\n            .email(userEntity.getEmail())\\n            .address(userEntity.getAddress())\\n            .validate();\\n        Optional<ErrorCause> cpfError = validateUniqueCPF(userEntity.getCpf());\\n        cpfError.ifPresent(errorCauses::add);\\n        if (!errorCauses.isEmpty()) {\\n            throw new ValidationException(errorCauses);\\n        }\\n    }\\n\\n    private Optional<ErrorCause> validateUniqueCPF(String cpf) {\\n        if (userRepository.existsByCpf(cpf)) {\\n            return Optional.of(new ErrorCause(\\\"cpf\\\", VALUE_ALREADY_REGISTERED));\\n        }\\n        return Optional.empty();\\n    }\\n\\n    public Optional<UserEntity> getById(Long id) {\\n        return userRepository.findById(id);\\n    }\\n\\n    @Data\\n    @Accessors(fluent = true, chain = true)\\n    private static class UserValidator extends DataValidator {\\n\\n        @NotBlank\\n        @Size(min = 3, max = 90)\\n        private String name;\\n\\n        @NotNull\\n        @PastOrPresent\\n        private LocalDate birthDate;\\n\\n        @CPF\\n        @NotNull\\n        private String cpf;\\n\\n        @Email\\n        private String email;\\n\\n        @Size(min = 5, max = 254)\\n        private String address;\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"61:62 file=\\\"../codes/initial/Service.java\\\"\",\n    \"61:62\": true,\n    \"file\": \"\\\"../codes/initial/Service.java\\\"\"\n  }), \"@Service\\npublic class UserService {\\n\\n    private final UserRepository userRepository;\\n\\n    @Autowired\\n    public UserService(UserRepository userRepository) {\\n        this.userRepository = userRepository;\\n    }\\n\\n    public UserEntity save(UserEntity userEntity) {\\n        validate(userEntity);\\n        return userRepository.save(userEntity);\\n    }\\n\\n    private void validate(UserEntity userEntity) {\\n        List<ErrorCause> errorCauses = new UserValidator()\\n            .birthDate(userEntity.getBirthDate())\\n            .name(userEntity.getName())\\n            .cpf(userEntity.getCpf())\\n            .email(userEntity.getEmail())\\n            .address(userEntity.getAddress())\\n            .validate();\\n        Optional<ErrorCause> cpfError = validateUniqueCPF(userEntity.getCpf());\\n        cpfError.ifPresent(errorCauses::add);\\n        if (!errorCauses.isEmpty()) {\\n            throw new ValidationException(errorCauses);\\n        }\\n    }\\n\\n    private Optional<ErrorCause> validateUniqueCPF(String cpf) {\\n        if (userRepository.existsByCpf(cpf)) {\\n            return Optional.of(new ErrorCause(\\\"cpf\\\", VALUE_ALREADY_REGISTERED));\\n        }\\n        return Optional.empty();\\n    }\\n\\n    public Optional<UserEntity> getById(Long id) {\\n        return userRepository.findById(id);\\n    }\\n\\n    @Data\\n    @Accessors(fluent = true, chain = true)\\n    private static class UserValidator extends DataValidator {\\n\\n        @NotBlank\\n        @Size(min = 3, max = 90)\\n        private String name;\\n\\n        @NotNull\\n        @PastOrPresent\\n        private LocalDate birthDate;\\n\\n        @CPF\\n        @NotNull\\n        private String cpf;\\n\\n        @Email\\n        private String email;\\n\\n        @Size(min = 5, max = 254)\\n        private String address;\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"48,52,56 file=\\\"../codes/initial/Service.java\\\" title=\\\"Os campos obrigatórios\\\"\",\n    \"48,52,56\": true,\n    \"file\": \"\\\"../codes/initial/Service.java\\\"\",\n    \"title\": \"\\\"Os\",\n    \"campos\": true,\n    \"obrigatórios\\\"\": true\n  }), \"@Service\\npublic class UserService {\\n\\n    private final UserRepository userRepository;\\n\\n    @Autowired\\n    public UserService(UserRepository userRepository) {\\n        this.userRepository = userRepository;\\n    }\\n\\n    public UserEntity save(UserEntity userEntity) {\\n        validate(userEntity);\\n        return userRepository.save(userEntity);\\n    }\\n\\n    private void validate(UserEntity userEntity) {\\n        List<ErrorCause> errorCauses = new UserValidator()\\n            .birthDate(userEntity.getBirthDate())\\n            .name(userEntity.getName())\\n            .cpf(userEntity.getCpf())\\n            .email(userEntity.getEmail())\\n            .address(userEntity.getAddress())\\n            .validate();\\n        Optional<ErrorCause> cpfError = validateUniqueCPF(userEntity.getCpf());\\n        cpfError.ifPresent(errorCauses::add);\\n        if (!errorCauses.isEmpty()) {\\n            throw new ValidationException(errorCauses);\\n        }\\n    }\\n\\n    private Optional<ErrorCause> validateUniqueCPF(String cpf) {\\n        if (userRepository.existsByCpf(cpf)) {\\n            return Optional.of(new ErrorCause(\\\"cpf\\\", VALUE_ALREADY_REGISTERED));\\n        }\\n        return Optional.empty();\\n    }\\n\\n    public Optional<UserEntity> getById(Long id) {\\n        return userRepository.findById(id);\\n    }\\n\\n    @Data\\n    @Accessors(fluent = true, chain = true)\\n    private static class UserValidator extends DataValidator {\\n\\n        @NotBlank\\n        @Size(min = 3, max = 90)\\n        private String name;\\n\\n        @NotNull\\n        @PastOrPresent\\n        private LocalDate birthDate;\\n\\n        @CPF\\n        @NotNull\\n        private String cpf;\\n\\n        @Email\\n        private String email;\\n\\n        @Size(min = 5, max = 254)\\n        private String address;\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"23\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"23 file=\\\"../codes/initial/Service.java\\\"\",\n    \"file\": \"\\\"../codes/initial/Service.java\\\"\"\n  }), \"@Service\\npublic class UserService {\\n\\n    private final UserRepository userRepository;\\n\\n    @Autowired\\n    public UserService(UserRepository userRepository) {\\n        this.userRepository = userRepository;\\n    }\\n\\n    public UserEntity save(UserEntity userEntity) {\\n        validate(userEntity);\\n        return userRepository.save(userEntity);\\n    }\\n\\n    private void validate(UserEntity userEntity) {\\n        List<ErrorCause> errorCauses = new UserValidator()\\n            .birthDate(userEntity.getBirthDate())\\n            .name(userEntity.getName())\\n            .cpf(userEntity.getCpf())\\n            .email(userEntity.getEmail())\\n            .address(userEntity.getAddress())\\n            .validate();\\n        Optional<ErrorCause> cpfError = validateUniqueCPF(userEntity.getCpf());\\n        cpfError.ifPresent(errorCauses::add);\\n        if (!errorCauses.isEmpty()) {\\n            throw new ValidationException(errorCauses);\\n        }\\n    }\\n\\n    private Optional<ErrorCause> validateUniqueCPF(String cpf) {\\n        if (userRepository.existsByCpf(cpf)) {\\n            return Optional.of(new ErrorCause(\\\"cpf\\\", VALUE_ALREADY_REGISTERED));\\n        }\\n        return Optional.empty();\\n    }\\n\\n    public Optional<UserEntity> getById(Long id) {\\n        return userRepository.findById(id);\\n    }\\n\\n    @Data\\n    @Accessors(fluent = true, chain = true)\\n    private static class UserValidator extends DataValidator {\\n\\n        @NotBlank\\n        @Size(min = 3, max = 90)\\n        private String name;\\n\\n        @NotNull\\n        @PastOrPresent\\n        private LocalDate birthDate;\\n\\n        @CPF\\n        @NotNull\\n        private String cpf;\\n\\n        @Email\\n        private String email;\\n\\n        @Size(min = 5, max = 254)\\n        private String address;\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"17[9:37] file=\\\"../codes/initial/Service.java\\\"\",\n    \"17[9:37]\": true,\n    \"file\": \"\\\"../codes/initial/Service.java\\\"\"\n  }), \"@Service\\npublic class UserService {\\n\\n    private final UserRepository userRepository;\\n\\n    @Autowired\\n    public UserService(UserRepository userRepository) {\\n        this.userRepository = userRepository;\\n    }\\n\\n    public UserEntity save(UserEntity userEntity) {\\n        validate(userEntity);\\n        return userRepository.save(userEntity);\\n    }\\n\\n    private void validate(UserEntity userEntity) {\\n        List<ErrorCause> errorCauses = new UserValidator()\\n            .birthDate(userEntity.getBirthDate())\\n            .name(userEntity.getName())\\n            .cpf(userEntity.getCpf())\\n            .email(userEntity.getEmail())\\n            .address(userEntity.getAddress())\\n            .validate();\\n        Optional<ErrorCause> cpfError = validateUniqueCPF(userEntity.getCpf());\\n        cpfError.ifPresent(errorCauses::add);\\n        if (!errorCauses.isEmpty()) {\\n            throw new ValidationException(errorCauses);\\n        }\\n    }\\n\\n    private Optional<ErrorCause> validateUniqueCPF(String cpf) {\\n        if (userRepository.existsByCpf(cpf)) {\\n            return Optional.of(new ErrorCause(\\\"cpf\\\", VALUE_ALREADY_REGISTERED));\\n        }\\n        return Optional.empty();\\n    }\\n\\n    public Optional<UserEntity> getById(Long id) {\\n        return userRepository.findById(id);\\n    }\\n\\n    @Data\\n    @Accessors(fluent = true, chain = true)\\n    private static class UserValidator extends DataValidator {\\n\\n        @NotBlank\\n        @Size(min = 3, max = 90)\\n        private String name;\\n\\n        @NotNull\\n        @PastOrPresent\\n        private LocalDate birthDate;\\n\\n        @CPF\\n        @NotNull\\n        private String cpf;\\n\\n        @Email\\n        private String email;\\n\\n        @Size(min = 5, max = 254)\\n        private String address;\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"24\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"24 file=\\\"../codes/initial/Service.java\\\"\",\n    \"file\": \"\\\"../codes/initial/Service.java\\\"\"\n  }), \"@Service\\npublic class UserService {\\n\\n    private final UserRepository userRepository;\\n\\n    @Autowired\\n    public UserService(UserRepository userRepository) {\\n        this.userRepository = userRepository;\\n    }\\n\\n    public UserEntity save(UserEntity userEntity) {\\n        validate(userEntity);\\n        return userRepository.save(userEntity);\\n    }\\n\\n    private void validate(UserEntity userEntity) {\\n        List<ErrorCause> errorCauses = new UserValidator()\\n            .birthDate(userEntity.getBirthDate())\\n            .name(userEntity.getName())\\n            .cpf(userEntity.getCpf())\\n            .email(userEntity.getEmail())\\n            .address(userEntity.getAddress())\\n            .validate();\\n        Optional<ErrorCause> cpfError = validateUniqueCPF(userEntity.getCpf());\\n        cpfError.ifPresent(errorCauses::add);\\n        if (!errorCauses.isEmpty()) {\\n            throw new ValidationException(errorCauses);\\n        }\\n    }\\n\\n    private Optional<ErrorCause> validateUniqueCPF(String cpf) {\\n        if (userRepository.existsByCpf(cpf)) {\\n            return Optional.of(new ErrorCause(\\\"cpf\\\", VALUE_ALREADY_REGISTERED));\\n        }\\n        return Optional.empty();\\n    }\\n\\n    public Optional<UserEntity> getById(Long id) {\\n        return userRepository.findById(id);\\n    }\\n\\n    @Data\\n    @Accessors(fluent = true, chain = true)\\n    private static class UserValidator extends DataValidator {\\n\\n        @NotBlank\\n        @Size(min = 3, max = 90)\\n        private String name;\\n\\n        @NotNull\\n        @PastOrPresent\\n        private LocalDate birthDate;\\n\\n        @CPF\\n        @NotNull\\n        private String cpf;\\n\\n        @Email\\n        private String email;\\n\\n        @Size(min = 5, max = 254)\\n        private String address;\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"31:34 file=\\\"../codes/initial/Service.java\\\"\",\n    \"31:34\": true,\n    \"file\": \"\\\"../codes/initial/Service.java\\\"\"\n  }), \"@Service\\npublic class UserService {\\n\\n    private final UserRepository userRepository;\\n\\n    @Autowired\\n    public UserService(UserRepository userRepository) {\\n        this.userRepository = userRepository;\\n    }\\n\\n    public UserEntity save(UserEntity userEntity) {\\n        validate(userEntity);\\n        return userRepository.save(userEntity);\\n    }\\n\\n    private void validate(UserEntity userEntity) {\\n        List<ErrorCause> errorCauses = new UserValidator()\\n            .birthDate(userEntity.getBirthDate())\\n            .name(userEntity.getName())\\n            .cpf(userEntity.getCpf())\\n            .email(userEntity.getEmail())\\n            .address(userEntity.getAddress())\\n            .validate();\\n        Optional<ErrorCause> cpfError = validateUniqueCPF(userEntity.getCpf());\\n        cpfError.ifPresent(errorCauses::add);\\n        if (!errorCauses.isEmpty()) {\\n            throw new ValidationException(errorCauses);\\n        }\\n    }\\n\\n    private Optional<ErrorCause> validateUniqueCPF(String cpf) {\\n        if (userRepository.existsByCpf(cpf)) {\\n            return Optional.of(new ErrorCause(\\\"cpf\\\", VALUE_ALREADY_REGISTERED));\\n        }\\n        return Optional.empty();\\n    }\\n\\n    public Optional<UserEntity> getById(Long id) {\\n        return userRepository.findById(id);\\n    }\\n\\n    @Data\\n    @Accessors(fluent = true, chain = true)\\n    private static class UserValidator extends DataValidator {\\n\\n        @NotBlank\\n        @Size(min = 3, max = 90)\\n        private String name;\\n\\n        @NotNull\\n        @PastOrPresent\\n        private LocalDate birthDate;\\n\\n        @CPF\\n        @NotNull\\n        private String cpf;\\n\\n        @Email\\n        private String email;\\n\\n        @Size(min = 5, max = 254)\\n        private String address;\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"32\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"32 file=\\\"../codes/initial/Service.java\\\"\",\n    \"file\": \"\\\"../codes/initial/Service.java\\\"\"\n  }), \"@Service\\npublic class UserService {\\n\\n    private final UserRepository userRepository;\\n\\n    @Autowired\\n    public UserService(UserRepository userRepository) {\\n        this.userRepository = userRepository;\\n    }\\n\\n    public UserEntity save(UserEntity userEntity) {\\n        validate(userEntity);\\n        return userRepository.save(userEntity);\\n    }\\n\\n    private void validate(UserEntity userEntity) {\\n        List<ErrorCause> errorCauses = new UserValidator()\\n            .birthDate(userEntity.getBirthDate())\\n            .name(userEntity.getName())\\n            .cpf(userEntity.getCpf())\\n            .email(userEntity.getEmail())\\n            .address(userEntity.getAddress())\\n            .validate();\\n        Optional<ErrorCause> cpfError = validateUniqueCPF(userEntity.getCpf());\\n        cpfError.ifPresent(errorCauses::add);\\n        if (!errorCauses.isEmpty()) {\\n            throw new ValidationException(errorCauses);\\n        }\\n    }\\n\\n    private Optional<ErrorCause> validateUniqueCPF(String cpf) {\\n        if (userRepository.existsByCpf(cpf)) {\\n            return Optional.of(new ErrorCause(\\\"cpf\\\", VALUE_ALREADY_REGISTERED));\\n        }\\n        return Optional.empty();\\n    }\\n\\n    public Optional<UserEntity> getById(Long id) {\\n        return userRepository.findById(id);\\n    }\\n\\n    @Data\\n    @Accessors(fluent = true, chain = true)\\n    private static class UserValidator extends DataValidator {\\n\\n        @NotBlank\\n        @Size(min = 3, max = 90)\\n        private String name;\\n\\n        @NotNull\\n        @PastOrPresent\\n        private LocalDate birthDate;\\n\\n        @CPF\\n        @NotNull\\n        private String cpf;\\n\\n        @Email\\n        private String email;\\n\\n        @Size(min = 5, max = 254)\\n        private String address;\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"33\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"33 file=\\\"../codes/initial/Service.java\\\"\",\n    \"file\": \"\\\"../codes/initial/Service.java\\\"\"\n  }), \"@Service\\npublic class UserService {\\n\\n    private final UserRepository userRepository;\\n\\n    @Autowired\\n    public UserService(UserRepository userRepository) {\\n        this.userRepository = userRepository;\\n    }\\n\\n    public UserEntity save(UserEntity userEntity) {\\n        validate(userEntity);\\n        return userRepository.save(userEntity);\\n    }\\n\\n    private void validate(UserEntity userEntity) {\\n        List<ErrorCause> errorCauses = new UserValidator()\\n            .birthDate(userEntity.getBirthDate())\\n            .name(userEntity.getName())\\n            .cpf(userEntity.getCpf())\\n            .email(userEntity.getEmail())\\n            .address(userEntity.getAddress())\\n            .validate();\\n        Optional<ErrorCause> cpfError = validateUniqueCPF(userEntity.getCpf());\\n        cpfError.ifPresent(errorCauses::add);\\n        if (!errorCauses.isEmpty()) {\\n            throw new ValidationException(errorCauses);\\n        }\\n    }\\n\\n    private Optional<ErrorCause> validateUniqueCPF(String cpf) {\\n        if (userRepository.existsByCpf(cpf)) {\\n            return Optional.of(new ErrorCause(\\\"cpf\\\", VALUE_ALREADY_REGISTERED));\\n        }\\n        return Optional.empty();\\n    }\\n\\n    public Optional<UserEntity> getById(Long id) {\\n        return userRepository.findById(id);\\n    }\\n\\n    @Data\\n    @Accessors(fluent = true, chain = true)\\n    private static class UserValidator extends DataValidator {\\n\\n        @NotBlank\\n        @Size(min = 3, max = 90)\\n        private String name;\\n\\n        @NotNull\\n        @PastOrPresent\\n        private LocalDate birthDate;\\n\\n        @CPF\\n        @NotNull\\n        private String cpf;\\n\\n        @Email\\n        private String email;\\n\\n        @Size(min = 5, max = 254)\\n        private String address;\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"35\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"35 file=\\\"../codes/initial/Service.java\\\"\",\n    \"file\": \"\\\"../codes/initial/Service.java\\\"\"\n  }), \"@Service\\npublic class UserService {\\n\\n    private final UserRepository userRepository;\\n\\n    @Autowired\\n    public UserService(UserRepository userRepository) {\\n        this.userRepository = userRepository;\\n    }\\n\\n    public UserEntity save(UserEntity userEntity) {\\n        validate(userEntity);\\n        return userRepository.save(userEntity);\\n    }\\n\\n    private void validate(UserEntity userEntity) {\\n        List<ErrorCause> errorCauses = new UserValidator()\\n            .birthDate(userEntity.getBirthDate())\\n            .name(userEntity.getName())\\n            .cpf(userEntity.getCpf())\\n            .email(userEntity.getEmail())\\n            .address(userEntity.getAddress())\\n            .validate();\\n        Optional<ErrorCause> cpfError = validateUniqueCPF(userEntity.getCpf());\\n        cpfError.ifPresent(errorCauses::add);\\n        if (!errorCauses.isEmpty()) {\\n            throw new ValidationException(errorCauses);\\n        }\\n    }\\n\\n    private Optional<ErrorCause> validateUniqueCPF(String cpf) {\\n        if (userRepository.existsByCpf(cpf)) {\\n            return Optional.of(new ErrorCause(\\\"cpf\\\", VALUE_ALREADY_REGISTERED));\\n        }\\n        return Optional.empty();\\n    }\\n\\n    public Optional<UserEntity> getById(Long id) {\\n        return userRepository.findById(id);\\n    }\\n\\n    @Data\\n    @Accessors(fluent = true, chain = true)\\n    private static class UserValidator extends DataValidator {\\n\\n        @NotBlank\\n        @Size(min = 3, max = 90)\\n        private String name;\\n\\n        @NotNull\\n        @PastOrPresent\\n        private LocalDate birthDate;\\n\\n        @CPF\\n        @NotNull\\n        private String cpf;\\n\\n        @Email\\n        private String email;\\n\\n        @Size(min = 5, max = 254)\\n        private String address;\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"25\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"25 file=\\\"../codes/initial/Service.java\\\"\",\n    \"file\": \"\\\"../codes/initial/Service.java\\\"\"\n  }), \"@Service\\npublic class UserService {\\n\\n    private final UserRepository userRepository;\\n\\n    @Autowired\\n    public UserService(UserRepository userRepository) {\\n        this.userRepository = userRepository;\\n    }\\n\\n    public UserEntity save(UserEntity userEntity) {\\n        validate(userEntity);\\n        return userRepository.save(userEntity);\\n    }\\n\\n    private void validate(UserEntity userEntity) {\\n        List<ErrorCause> errorCauses = new UserValidator()\\n            .birthDate(userEntity.getBirthDate())\\n            .name(userEntity.getName())\\n            .cpf(userEntity.getCpf())\\n            .email(userEntity.getEmail())\\n            .address(userEntity.getAddress())\\n            .validate();\\n        Optional<ErrorCause> cpfError = validateUniqueCPF(userEntity.getCpf());\\n        cpfError.ifPresent(errorCauses::add);\\n        if (!errorCauses.isEmpty()) {\\n            throw new ValidationException(errorCauses);\\n        }\\n    }\\n\\n    private Optional<ErrorCause> validateUniqueCPF(String cpf) {\\n        if (userRepository.existsByCpf(cpf)) {\\n            return Optional.of(new ErrorCause(\\\"cpf\\\", VALUE_ALREADY_REGISTERED));\\n        }\\n        return Optional.empty();\\n    }\\n\\n    public Optional<UserEntity> getById(Long id) {\\n        return userRepository.findById(id);\\n    }\\n\\n    @Data\\n    @Accessors(fluent = true, chain = true)\\n    private static class UserValidator extends DataValidator {\\n\\n        @NotBlank\\n        @Size(min = 3, max = 90)\\n        private String name;\\n\\n        @NotNull\\n        @PastOrPresent\\n        private LocalDate birthDate;\\n\\n        @CPF\\n        @NotNull\\n        private String cpf;\\n\\n        @Email\\n        private String email;\\n\\n        @Size(min = 5, max = 254)\\n        private String address;\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"26:28 file=\\\"../codes/initial/Service.java\\\"\",\n    \"26:28\": true,\n    \"file\": \"\\\"../codes/initial/Service.java\\\"\"\n  }), \"@Service\\npublic class UserService {\\n\\n    private final UserRepository userRepository;\\n\\n    @Autowired\\n    public UserService(UserRepository userRepository) {\\n        this.userRepository = userRepository;\\n    }\\n\\n    public UserEntity save(UserEntity userEntity) {\\n        validate(userEntity);\\n        return userRepository.save(userEntity);\\n    }\\n\\n    private void validate(UserEntity userEntity) {\\n        List<ErrorCause> errorCauses = new UserValidator()\\n            .birthDate(userEntity.getBirthDate())\\n            .name(userEntity.getName())\\n            .cpf(userEntity.getCpf())\\n            .email(userEntity.getEmail())\\n            .address(userEntity.getAddress())\\n            .validate();\\n        Optional<ErrorCause> cpfError = validateUniqueCPF(userEntity.getCpf());\\n        cpfError.ifPresent(errorCauses::add);\\n        if (!errorCauses.isEmpty()) {\\n            throw new ValidationException(errorCauses);\\n        }\\n    }\\n\\n    private Optional<ErrorCause> validateUniqueCPF(String cpf) {\\n        if (userRepository.existsByCpf(cpf)) {\\n            return Optional.of(new ErrorCause(\\\"cpf\\\", VALUE_ALREADY_REGISTERED));\\n        }\\n        return Optional.empty();\\n    }\\n\\n    public Optional<UserEntity> getById(Long id) {\\n        return userRepository.findById(id);\\n    }\\n\\n    @Data\\n    @Accessors(fluent = true, chain = true)\\n    private static class UserValidator extends DataValidator {\\n\\n        @NotBlank\\n        @Size(min = 3, max = 90)\\n        private String name;\\n\\n        @NotNull\\n        @PastOrPresent\\n        private LocalDate birthDate;\\n\\n        @CPF\\n        @NotNull\\n        private String cpf;\\n\\n        @Email\\n        private String email;\\n\\n        @Size(min = 5, max = 254)\\n        private String address;\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"26:28 file=\\\"../codes/initial/Service.java\\\" title='A validação é atômica'\",\n    \"26:28\": true,\n    \"file\": \"\\\"../codes/initial/Service.java\\\"\",\n    \"title\": \"'A\",\n    \"validação\": true,\n    \"é\": true,\n    \"atômica'\": true\n  }), \"@Service\\npublic class UserService {\\n\\n    private final UserRepository userRepository;\\n\\n    @Autowired\\n    public UserService(UserRepository userRepository) {\\n        this.userRepository = userRepository;\\n    }\\n\\n    public UserEntity save(UserEntity userEntity) {\\n        validate(userEntity);\\n        return userRepository.save(userEntity);\\n    }\\n\\n    private void validate(UserEntity userEntity) {\\n        List<ErrorCause> errorCauses = new UserValidator()\\n            .birthDate(userEntity.getBirthDate())\\n            .name(userEntity.getName())\\n            .cpf(userEntity.getCpf())\\n            .email(userEntity.getEmail())\\n            .address(userEntity.getAddress())\\n            .validate();\\n        Optional<ErrorCause> cpfError = validateUniqueCPF(userEntity.getCpf());\\n        cpfError.ifPresent(errorCauses::add);\\n        if (!errorCauses.isEmpty()) {\\n            throw new ValidationException(errorCauses);\\n        }\\n    }\\n\\n    private Optional<ErrorCause> validateUniqueCPF(String cpf) {\\n        if (userRepository.existsByCpf(cpf)) {\\n            return Optional.of(new ErrorCause(\\\"cpf\\\", VALUE_ALREADY_REGISTERED));\\n        }\\n        return Optional.empty();\\n    }\\n\\n    public Optional<UserEntity> getById(Long id) {\\n        return userRepository.findById(id);\\n    }\\n\\n    @Data\\n    @Accessors(fluent = true, chain = true)\\n    private static class UserValidator extends DataValidator {\\n\\n        @NotBlank\\n        @Size(min = 3, max = 90)\\n        private String name;\\n\\n        @NotNull\\n        @PastOrPresent\\n        private LocalDate birthDate;\\n\\n        @CPF\\n        @NotNull\\n        private String cpf;\\n\\n        @Email\\n        private String email;\\n\\n        @Size(min = 5, max = 254)\\n        private String address;\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"13\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"13 file=\\\"../codes/initial/Service.java\\\"\",\n    \"file\": \"\\\"../codes/initial/Service.java\\\"\"\n  }), \"@Service\\npublic class UserService {\\n\\n    private final UserRepository userRepository;\\n\\n    @Autowired\\n    public UserService(UserRepository userRepository) {\\n        this.userRepository = userRepository;\\n    }\\n\\n    public UserEntity save(UserEntity userEntity) {\\n        validate(userEntity);\\n        return userRepository.save(userEntity);\\n    }\\n\\n    private void validate(UserEntity userEntity) {\\n        List<ErrorCause> errorCauses = new UserValidator()\\n            .birthDate(userEntity.getBirthDate())\\n            .name(userEntity.getName())\\n            .cpf(userEntity.getCpf())\\n            .email(userEntity.getEmail())\\n            .address(userEntity.getAddress())\\n            .validate();\\n        Optional<ErrorCause> cpfError = validateUniqueCPF(userEntity.getCpf());\\n        cpfError.ifPresent(errorCauses::add);\\n        if (!errorCauses.isEmpty()) {\\n            throw new ValidationException(errorCauses);\\n        }\\n    }\\n\\n    private Optional<ErrorCause> validateUniqueCPF(String cpf) {\\n        if (userRepository.existsByCpf(cpf)) {\\n            return Optional.of(new ErrorCause(\\\"cpf\\\", VALUE_ALREADY_REGISTERED));\\n        }\\n        return Optional.empty();\\n    }\\n\\n    public Optional<UserEntity> getById(Long id) {\\n        return userRepository.findById(id);\\n    }\\n\\n    @Data\\n    @Accessors(fluent = true, chain = true)\\n    private static class UserValidator extends DataValidator {\\n\\n        @NotBlank\\n        @Size(min = 3, max = 90)\\n        private String name;\\n\\n        @NotNull\\n        @PastOrPresent\\n        private LocalDate birthDate;\\n\\n        @CPF\\n        @NotNull\\n        private String cpf;\\n\\n        @Email\\n        private String email;\\n\\n        @Size(min = 5, max = 254)\\n        private String address;\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"38:40 file=\\\"../codes/initial/Service.java\\\"\",\n    \"38:40\": true,\n    \"file\": \"\\\"../codes/initial/Service.java\\\"\"\n  }), \"@Service\\npublic class UserService {\\n\\n    private final UserRepository userRepository;\\n\\n    @Autowired\\n    public UserService(UserRepository userRepository) {\\n        this.userRepository = userRepository;\\n    }\\n\\n    public UserEntity save(UserEntity userEntity) {\\n        validate(userEntity);\\n        return userRepository.save(userEntity);\\n    }\\n\\n    private void validate(UserEntity userEntity) {\\n        List<ErrorCause> errorCauses = new UserValidator()\\n            .birthDate(userEntity.getBirthDate())\\n            .name(userEntity.getName())\\n            .cpf(userEntity.getCpf())\\n            .email(userEntity.getEmail())\\n            .address(userEntity.getAddress())\\n            .validate();\\n        Optional<ErrorCause> cpfError = validateUniqueCPF(userEntity.getCpf());\\n        cpfError.ifPresent(errorCauses::add);\\n        if (!errorCauses.isEmpty()) {\\n            throw new ValidationException(errorCauses);\\n        }\\n    }\\n\\n    private Optional<ErrorCause> validateUniqueCPF(String cpf) {\\n        if (userRepository.existsByCpf(cpf)) {\\n            return Optional.of(new ErrorCause(\\\"cpf\\\", VALUE_ALREADY_REGISTERED));\\n        }\\n        return Optional.empty();\\n    }\\n\\n    public Optional<UserEntity> getById(Long id) {\\n        return userRepository.findById(id);\\n    }\\n\\n    @Data\\n    @Accessors(fluent = true, chain = true)\\n    private static class UserValidator extends DataValidator {\\n\\n        @NotBlank\\n        @Size(min = 3, max = 90)\\n        private String name;\\n\\n        @NotNull\\n        @PastOrPresent\\n        private LocalDate birthDate;\\n\\n        @CPF\\n        @NotNull\\n        private String cpf;\\n\\n        @Email\\n        private String email;\\n\\n        @Size(min = 5, max = 254)\\n        private String address;\\n    }\\n}\\n\"))), mdx(\"hr\", null), mdx(L.Column, {\n    sx: {\n      \"alignItems\": \"center\"\n    }\n  }, mdx(\"h1\", null, \"Reposit\\xF3rio\"), mdx(Database, {\n    showLegend: false,\n    style: {\n      height: \"170px\"\n    },\n    mdxType: \"Database\"\n  })), mdx(\"hr\", null), mdx(Surfer, {\n    mdxType: \"Surfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"1:2 file=\\\"../codes/initial/Repository.java\\\"\",\n    \"1:2\": true,\n    \"file\": \"\\\"../codes/initial/Repository.java\\\"\"\n  }), \"@Repository\\npublic interface UserRepository extends CrudRepository<UserEntity, Long> {\\n\\n    Boolean existsByCpf(String cpf);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"4\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"4 file=\\\"../codes/initial/Repository.java\\\"\",\n    \"file\": \"\\\"../codes/initial/Repository.java\\\"\"\n  }), \"@Repository\\npublic interface UserRepository extends CrudRepository<UserEntity, Long> {\\n\\n    Boolean existsByCpf(String cpf);\\n}\\n\"))), mdx(\"hr\", null), mdx(L.Column, {\n    sx: {\n      \"alignItems\": \"center\"\n    }\n  }, mdx(\"h1\", null, \"Exception handler\"), mdx(Controller, {\n    showLegend: false,\n    style: {\n      height: \"170px\"\n    },\n    mdxType: \"Controller\"\n  })), mdx(\"hr\", null), mdx(Surfer, {\n    mdxType: \"Surfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"1:2 file=\\\"../codes/initial/ExceptionHandler.java\\\"\",\n    \"1:2\": true,\n    \"file\": \"\\\"../codes/initial/ExceptionHandler.java\\\"\"\n  }), \"@RestControllerAdvice\\npublic class ExceptionHandlerController extends ResponseEntityExceptionHandler {\\n\\n    @ExceptionHandler(ValidationException.class)\\n    public ResponseEntity<ErrorDTO> validationException(ValidationException exception) {\\n        return ResponseEntity.badRequest().body(exception.getError());\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"4\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"4 file=\\\"../codes/initial/ExceptionHandler.java\\\"\",\n    \"file\": \"\\\"../codes/initial/ExceptionHandler.java\\\"\"\n  }), \"@RestControllerAdvice\\npublic class ExceptionHandlerController extends ResponseEntityExceptionHandler {\\n\\n    @ExceptionHandler(ValidationException.class)\\n    public ResponseEntity<ErrorDTO> validationException(ValidationException exception) {\\n        return ResponseEntity.badRequest().body(exception.getError());\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"5\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"5 file=\\\"../codes/initial/ExceptionHandler.java\\\"\",\n    \"file\": \"\\\"../codes/initial/ExceptionHandler.java\\\"\"\n  }), \"@RestControllerAdvice\\npublic class ExceptionHandlerController extends ResponseEntityExceptionHandler {\\n\\n    @ExceptionHandler(ValidationException.class)\\n    public ResponseEntity<ErrorDTO> validationException(ValidationException exception) {\\n        return ResponseEntity.badRequest().body(exception.getError());\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"6\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"6 file=\\\"../codes/initial/ExceptionHandler.java\\\"\",\n    \"file\": \"\\\"../codes/initial/ExceptionHandler.java\\\"\"\n  }), \"@RestControllerAdvice\\npublic class ExceptionHandlerController extends ResponseEntityExceptionHandler {\\n\\n    @ExceptionHandler(ValidationException.class)\\n    public ResponseEntity<ErrorDTO> validationException(ValidationException exception) {\\n        return ResponseEntity.badRequest().body(exception.getError());\\n    }\\n}\\n\"))), mdx(\"hr\", null), mdx(L.Column, {\n    sx: {\n      \"alignItems\": \"center\"\n    }\n  }, mdx(\"h2\", null, \"Relembrando\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"CPF deve ser \\xFAnico\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"CPF deve ter um formato v\\xE1lido\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Nome deve ter entre \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"3 e 90 caracteres\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Endere\\xE7o deve ter \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"5 e 254 caracteres\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Data de nascimento \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"n\\xE3o pode estar no futuro\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Campos obrigat\\xF3rios: nome, data de nascimento e CPF\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"E-mail deve ter um formato v\\xE1lido\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Valida\\xE7\\xE3o deve ser \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"at\\xF4mica\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Deve retornar o status code \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"201\"), \" caso usu\\xE1rio criado com sucesso\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Deve retornar o status code \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"200\"), \" caso usu\\xE1rio retornado com sucesso\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Deve retornar o status code \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"404\"), \" caso n\\xE3o exista o usu\\xE1rio solicitado\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Deve retornar o status code \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"400\"), \" caso erro de valida\\xE7\\xE3o\"))), mdx(\"hr\", null), mdx(L.Column, null, mdx(\"h2\", null, \"Escrevendo os testes\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"h3\", null, \"Preparem-se para o primeiro live code da hist\\xF3ria a dar certo! \\uD83D\\uDE39\\uD83D\\uDE39\"), mdx(\"p\", null, \" \", mdx(\"b\", null, \"OBS: \"), \"Os c\\xF3digos a seguir foram todos escritos no src de teste. \"))), mdx(\"hr\", null), mdx(Surfer, {\n    mdxType: \"Surfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"public abstract class AbstractIT {\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"1 title=\\\"Adicona o Spring no contexto de test do JUnit 5\\\"\",\n    \"title\": \"\\\"Adicona\",\n    \"o\": true,\n    \"Spring\": true,\n    \"no\": true,\n    \"contexto\": true,\n    \"de\": true,\n    \"test\": true,\n    \"do\": true,\n    \"JUnit\": true,\n    \"5\\\"\": true\n  }), \"@ExtendWith(SpringExtension.class)\\npublic abstract class AbstractIT {\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"2 title=\\\"SpringBootTest configura o spring para subir a aplicação no teste\\\"\",\n    \"title\": \"\\\"SpringBootTest\",\n    \"configura\": true,\n    \"o\": true,\n    \"spring\": true,\n    \"para\": true,\n    \"subir\": true,\n    \"a\": true,\n    \"aplicação\": true,\n    \"no\": true,\n    \"teste\\\"\": true\n  }), \"@ExtendWith(SpringExtension.class)\\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\\npublic abstract class AbstractIT {\\n}\\n\"))), mdx(\"hr\", null), mdx(Surfer, {\n    mdxType: \"Surfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"public class UserApiClient {\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"1\"\n  }), \"@Component\\npublic class UserApiClient {\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"4\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"4\"\n  }), \"@Component\\npublic class UserApiClient {\\n\\n    private static final String RESOURCE = \\\"/user\\\";\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"6:7\",\n    \"6:7\": true\n  }), \"@Component\\npublic class UserApiClient {\\n\\n    private static final String RESOURCE = \\\"/user\\\";\\n\\n    @Autowired\\n    private TestRestTemplate restTemplate;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"9\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"9\"\n  }), \"@Component\\npublic class UserApiClient {\\n\\n    private static final String RESOURCE = \\\"/user\\\";\\n\\n    @Autowired\\n    private TestRestTemplate restTemplate;\\n\\n    public <T> ResponseEntity<T> save(CreateUserDTO dto, Class<T> responseType) {\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"9[58:79] title=\\\"O response type é importante aqui quando a resposta for um erro\\\"\",\n    \"9[58:79]\": true,\n    \"title\": \"\\\"O\",\n    \"response\": true,\n    \"type\": true,\n    \"é\": true,\n    \"importante\": true,\n    \"aqui\": true,\n    \"quando\": true,\n    \"a\": true,\n    \"resposta\": true,\n    \"for\": true,\n    \"um\": true,\n    \"erro\\\"\": true\n  }), \"@Component\\npublic class UserApiClient {\\n\\n    private static final String RESOURCE = \\\"/user\\\";\\n\\n    @Autowired\\n    private TestRestTemplate restTemplate;\\n\\n    public <T> ResponseEntity<T> save(CreateUserDTO dto, Class<T> responseType) {\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"10\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"10\"\n  }), \"@Component\\npublic class UserApiClient {\\n\\n    private static final String RESOURCE = \\\"/user\\\";\\n\\n    @Autowired\\n    private TestRestTemplate restTemplate;\\n\\n    public <T> ResponseEntity<T> save(CreateUserDTO dto, Class<T> responseType) {\\n        return restTemplate.postForEntity(RESOURCE, dto, responseType);\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"9\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"9\"\n  }), \"@Component\\npublic class UserApiClient {\\n\\n    private static final String RESOURCE = \\\"/user\\\";\\n\\n    @Autowired\\n    private TestRestTemplate restTemplate;\\n\\n    public ResponseEntity<Void> save(CreateUserDTO dto) {\\n        return save(dto, Void.class);\\n    }\\n\\n    public <T> ResponseEntity<T> save(CreateUserDTO dto, Class<T> responseType) {\\n        return restTemplate.postForEntity(RESOURCE, dto, responseType);\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"10\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"10\"\n  }), \"@Component\\npublic class UserApiClient {\\n\\n    private static final String RESOURCE = \\\"/user\\\";\\n\\n    @Autowired\\n    private TestRestTemplate restTemplate;\\n\\n    public ResponseEntity<Void> save(CreateUserDTO dto) {\\n        return save(dto, Void.class);\\n    }\\n\\n    public <T> ResponseEntity<T> save(CreateUserDTO dto, Class<T> responseType) {\\n        return restTemplate.postForEntity(RESOURCE, dto, responseType);\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"17\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"17\"\n  }), \"@Component\\npublic class UserApiClient {\\n\\n    private static final String RESOURCE = \\\"/user\\\";\\n\\n    @Autowired\\n    private TestRestTemplate restTemplate;\\n\\n    public ResponseEntity<Void> save(CreateUserDTO dto) {\\n        return save(dto, Void.class);\\n    }\\n\\n    public <T> ResponseEntity<T> save(CreateUserDTO dto, Class<T> responseType) {\\n        return restTemplate.postForEntity(RESOURCE, dto, responseType);\\n    }\\n\\n    public ResponseEntity<UserDTO> getById(Long id) {\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"18\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"18\"\n  }), \"@Component\\npublic class UserApiClient {\\n\\n    private static final String RESOURCE = \\\"/user\\\";\\n\\n    @Autowired\\n    private TestRestTemplate restTemplate;\\n\\n    public ResponseEntity<Void> save(CreateUserDTO dto) {\\n        return save(dto, Void.class);\\n    }\\n\\n    public <T> ResponseEntity<T> save(CreateUserDTO dto, Class<T> responseType) {\\n        return restTemplate.postForEntity(RESOURCE, dto, responseType);\\n    }\\n\\n    public ResponseEntity<UserDTO> getById(Long id) {\\n        return restTemplate.getForEntity(RESOURCE + \\\"/\\\" + id, UserDTO.class);\\n    }\\n}\\n\"))), mdx(\"hr\", null), mdx(Surfer, {\n    mdxType: \"Surfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"class UserIT extends AbstractIT {\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"3\"\n  }), \"class UserIT extends AbstractIT {\\n\\n    private final Faker faker = new Faker();\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"5:6\",\n    \"5:6\": true\n  }), \"class UserIT extends AbstractIT {\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"8:10\",\n    \"8:10\": true\n  }), \"class UserIT extends AbstractIT {\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\n    void allFieldsFilledProperly() {\\n\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"11:16 title=\\\"Criando o usuário com todos os campos preenchidos\\\"\",\n    \"11:16\": true,\n    \"title\": \"\\\"Criando\",\n    \"o\": true,\n    \"usuário\": true,\n    \"com\": true,\n    \"todos\": true,\n    \"os\": true,\n    \"campos\": true,\n    \"preenchidos\\\"\": true\n  }), \"class UserIT extends AbstractIT {\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\n    void allFieldsFilledProperly() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"17\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"17\"\n  }), \"class UserIT extends AbstractIT {\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\n    void allFieldsFilledProperly() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        ResponseEntity<Void> resp = userApiClient.save(userToSave);\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"18\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"18\"\n  }), \"class UserIT extends AbstractIT {\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\n    void allFieldsFilledProperly() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        ResponseEntity<Void> resp = userApiClient.save(userToSave);\\n        assertThat(resp.getStatusCode()).isEqualTo(CREATED);\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"19\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"19 title=\\\"Aqui é criado um UserDTO, que é DTO retornado do endpoint get by id\\\"\",\n    \"title\": \"\\\"Aqui\",\n    \"é\": true,\n    \"criado\": true,\n    \"um\": true,\n    \"UserDTO,\": true,\n    \"que\": true,\n    \"DTO\": true,\n    \"retornado\": true,\n    \"do\": true,\n    \"endpoint\": true,\n    \"get\": true,\n    \"by\": true,\n    \"id\\\"\": true\n  }), \"class UserIT extends AbstractIT {\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\n    void allFieldsFilledProperly() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        ResponseEntity<Void> resp = userApiClient.save(userToSave);\\n        assertThat(resp.getStatusCode()).isEqualTo(CREATED);\\n        UserDTO savedUser = UserDTO.fromDTO(userToSave, getUserId(resp));\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"20\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"20\"\n  }), \"class UserIT extends AbstractIT {\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\n    void allFieldsFilledProperly() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        ResponseEntity<Void> resp = userApiClient.save(userToSave);\\n        assertThat(resp.getStatusCode()).isEqualTo(CREATED);\\n        UserDTO savedUser = UserDTO.fromDTO(userToSave, getUserId(resp));\\n        ResponseEntity<UserDTO> respGetById = userApiClient.getById(savedUser.getId());\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"21\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"21\"\n  }), \"class UserIT extends AbstractIT {\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\n    void allFieldsFilledProperly() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        ResponseEntity<Void> resp = userApiClient.save(userToSave);\\n        assertThat(resp.getStatusCode()).isEqualTo(CREATED);\\n        UserDTO savedUser = UserDTO.fromDTO(userToSave, getUserId(resp));\\n        ResponseEntity<UserDTO> respGetById = userApiClient.getById(savedUser.getId());\\n        assertThat(respGetById.getStatusCode()).isEqualTo(OK);\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"22\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"22\"\n  }), \"class UserIT extends AbstractIT {\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\n    void allFieldsFilledProperly() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        ResponseEntity<Void> resp = userApiClient.save(userToSave);\\n        assertThat(resp.getStatusCode()).isEqualTo(CREATED);\\n        UserDTO savedUser = UserDTO.fromDTO(userToSave, getUserId(resp));\\n        ResponseEntity<UserDTO> respGetById = userApiClient.getById(savedUser.getId());\\n        assertThat(respGetById.getStatusCode()).isEqualTo(OK);\\n        assertThat(respGetById.getBody()).isEqualTo(savedUser);\\n    }\\n}\\n\"))), mdx(\"hr\", null), mdx(Background, {\n    mdxType: \"Background\"\n  }), mdx(L.Row, null, mdx(Done, {\n    style: {\n      height: \"200px\"\n    },\n    mdxType: \"Done\"\n  }), mdx(\"h3\", {\n    style: {\n      color: \"gray\"\n    }\n  }, \" Teste salvando e recuperando usu\\xE1rio com todos os campos \")), mdx(\"hr\", null), mdx(Surfer, {\n    mdxType: \"Surfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"class UserIT extends AbstractIT {\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\n    void allFieldsFilledProperly() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        ResponseEntity<Void> resp = userApiClient.save(userToSave);\\n        assertThat(resp.getStatusCode()).isEqualTo(CREATED);\\n        UserDTO savedUser = UserDTO.fromDTO(userToSave, getUserId(resp));\\n        ResponseEntity<UserDTO> respGetById = userApiClient.getById(savedUser.getId());\\n        assertThat(respGetById.getStatusCode()).isEqualTo(OK);\\n        assertThat(respGetById.getBody()).isEqualTo(savedUser);\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"25:27\",\n    \"25:27\": true\n  }), \"class UserIT extends AbstractIT {\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\n    void allFieldsFilledProperly() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        ResponseEntity<Void> resp = userApiClient.save(userToSave);\\n        assertThat(resp.getStatusCode()).isEqualTo(CREATED);\\n        UserDTO savedUser = UserDTO.fromDTO(userToSave, getUserId(resp));\\n        ResponseEntity<UserDTO> respGetById = userApiClient.getById(savedUser.getId());\\n        assertThat(respGetById.getStatusCode()).isEqualTo(OK);\\n        assertThat(respGetById.getBody()).isEqualTo(savedUser);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with just required fields filled successfully\\\")\\n    void requiredFieldsFilled() {\\n\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"27:31\",\n    \"27:31\": true\n  }), \"class UserIT extends AbstractIT {\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\n    void allFieldsFilledProperly() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        ResponseEntity<Void> resp = userApiClient.save(userToSave);\\n        assertThat(resp.getStatusCode()).isEqualTo(CREATED);\\n        UserDTO savedUser = UserDTO.fromDTO(userToSave, getUserId(resp));\\n        ResponseEntity<UserDTO> respGetById = userApiClient.getById(savedUser.getId());\\n        assertThat(respGetById.getStatusCode()).isEqualTo(OK);\\n        assertThat(respGetById.getBody()).isEqualTo(savedUser);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with just required fields filled successfully\\\")\\n    void requiredFieldsFilled() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.name().fullName())\\n            .setBirthDate(LocalDate.now());\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"32\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"32\"\n  }), \"class UserIT extends AbstractIT {\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\n    void allFieldsFilledProperly() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        ResponseEntity<Void> resp = userApiClient.save(userToSave);\\n        assertThat(resp.getStatusCode()).isEqualTo(CREATED);\\n        UserDTO savedUser = UserDTO.fromDTO(userToSave, getUserId(resp));\\n        ResponseEntity<UserDTO> respGetById = userApiClient.getById(savedUser.getId());\\n        assertThat(respGetById.getStatusCode()).isEqualTo(OK);\\n        assertThat(respGetById.getBody()).isEqualTo(savedUser);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with just required fields filled successfully\\\")\\n    void requiredFieldsFilled() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.name().fullName())\\n            .setBirthDate(LocalDate.now());\\n        ResponseEntity<Void> resp = userApiClient.save(userToSave);\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"33\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"33\"\n  }), \"class UserIT extends AbstractIT {\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\n    void allFieldsFilledProperly() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        ResponseEntity<Void> resp = userApiClient.save(userToSave);\\n        assertThat(resp.getStatusCode()).isEqualTo(CREATED);\\n        UserDTO savedUser = UserDTO.fromDTO(userToSave, getUserId(resp));\\n        ResponseEntity<UserDTO> respGetById = userApiClient.getById(savedUser.getId());\\n        assertThat(respGetById.getStatusCode()).isEqualTo(OK);\\n        assertThat(respGetById.getBody()).isEqualTo(savedUser);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with just required fields filled successfully\\\")\\n    void requiredFieldsFilled() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.name().fullName())\\n            .setBirthDate(LocalDate.now());\\n        ResponseEntity<Void> resp = userApiClient.save(userToSave);\\n        assertThat(resp.getStatusCode()).isEqualTo(CREATED);\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"34\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"34\"\n  }), \"class UserIT extends AbstractIT {\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\n    void allFieldsFilledProperly() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        ResponseEntity<Void> resp = userApiClient.save(userToSave);\\n        assertThat(resp.getStatusCode()).isEqualTo(CREATED);\\n        UserDTO savedUser = UserDTO.fromDTO(userToSave, getUserId(resp));\\n        ResponseEntity<UserDTO> respGetById = userApiClient.getById(savedUser.getId());\\n        assertThat(respGetById.getStatusCode()).isEqualTo(OK);\\n        assertThat(respGetById.getBody()).isEqualTo(savedUser);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with just required fields filled successfully\\\")\\n    void requiredFieldsFilled() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.name().fullName())\\n            .setBirthDate(LocalDate.now());\\n        ResponseEntity<Void> resp = userApiClient.save(userToSave);\\n        assertThat(resp.getStatusCode()).isEqualTo(CREATED);\\n        UserDTO savedUser = UserDTO.fromDTO(userToSave, getUserId(resp));\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"35\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"35\"\n  }), \"class UserIT extends AbstractIT {\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\n    void allFieldsFilledProperly() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        ResponseEntity<Void> resp = userApiClient.save(userToSave);\\n        assertThat(resp.getStatusCode()).isEqualTo(CREATED);\\n        UserDTO savedUser = UserDTO.fromDTO(userToSave, getUserId(resp));\\n        ResponseEntity<UserDTO> respGetById = userApiClient.getById(savedUser.getId());\\n        assertThat(respGetById.getStatusCode()).isEqualTo(OK);\\n        assertThat(respGetById.getBody()).isEqualTo(savedUser);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with just required fields filled successfully\\\")\\n    void requiredFieldsFilled() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.name().fullName())\\n            .setBirthDate(LocalDate.now());\\n        ResponseEntity<Void> resp = userApiClient.save(userToSave);\\n        assertThat(resp.getStatusCode()).isEqualTo(CREATED);\\n        UserDTO savedUser = UserDTO.fromDTO(userToSave, getUserId(resp));\\n        ResponseEntity<UserDTO> respGetById = userApiClient.getById(savedUser.getId());\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"36\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"36\"\n  }), \"class UserIT extends AbstractIT {\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\n    void allFieldsFilledProperly() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        ResponseEntity<Void> resp = userApiClient.save(userToSave);\\n        assertThat(resp.getStatusCode()).isEqualTo(CREATED);\\n        UserDTO savedUser = UserDTO.fromDTO(userToSave, getUserId(resp));\\n        ResponseEntity<UserDTO> respGetById = userApiClient.getById(savedUser.getId());\\n        assertThat(respGetById.getStatusCode()).isEqualTo(OK);\\n        assertThat(respGetById.getBody()).isEqualTo(savedUser);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with just required fields filled successfully\\\")\\n    void requiredFieldsFilled() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.name().fullName())\\n            .setBirthDate(LocalDate.now());\\n        ResponseEntity<Void> resp = userApiClient.save(userToSave);\\n        assertThat(resp.getStatusCode()).isEqualTo(CREATED);\\n        UserDTO savedUser = UserDTO.fromDTO(userToSave, getUserId(resp));\\n        ResponseEntity<UserDTO> respGetById = userApiClient.getById(savedUser.getId());\\n        assertThat(respGetById.getStatusCode()).isEqualTo(OK);\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"37\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"37\"\n  }), \"class UserIT extends AbstractIT {\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\n    void allFieldsFilledProperly() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        ResponseEntity<Void> resp = userApiClient.save(userToSave);\\n        assertThat(resp.getStatusCode()).isEqualTo(CREATED);\\n        UserDTO savedUser = UserDTO.fromDTO(userToSave, getUserId(resp));\\n        ResponseEntity<UserDTO> respGetById = userApiClient.getById(savedUser.getId());\\n        assertThat(respGetById.getStatusCode()).isEqualTo(OK);\\n        assertThat(respGetById.getBody()).isEqualTo(savedUser);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with just required fields filled successfully\\\")\\n    void requiredFieldsFilled() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.name().fullName())\\n            .setBirthDate(LocalDate.now());\\n        ResponseEntity<Void> resp = userApiClient.save(userToSave);\\n        assertThat(resp.getStatusCode()).isEqualTo(CREATED);\\n        UserDTO savedUser = UserDTO.fromDTO(userToSave, getUserId(resp));\\n        ResponseEntity<UserDTO> respGetById = userApiClient.getById(savedUser.getId());\\n        assertThat(respGetById.getStatusCode()).isEqualTo(OK);\\n        assertThat(respGetById.getBody()).isEqualTo(savedUser);\\n    }\\n}\\n\"))), mdx(\"hr\", null), mdx(Background, {\n    mdxType: \"Background\"\n  }), mdx(L.Row, null, mdx(Done, {\n    style: {\n      height: \"200px\"\n    },\n    mdxType: \"Done\"\n  }), mdx(\"h3\", {\n    style: {\n      color: \"gray\"\n    }\n  }, \" Teste salvando e recuperando usu\\xE1rio com apenas os campos requeridos \")), mdx(\"hr\", null), mdx(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\"\n    }\n  }, mdx(\"p\", {\n    style: {\n      color: \"rgb(253, 71, 85)\",\n      fontSize: \"40px\"\n    }\n  }, \"Alerta de c\\xF3digo duplicado!!!\"), mdx(Alert, {\n    style: {\n      height: \"200px\"\n    },\n    mdxType: \"Alert\"\n  })), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"@Test\\n@DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\nvoid allFieldsFilledProperly() {\\n    CreateUserDTO userToSave = new CreateUserDTO()\\n        .setCpf(CPF.generate())\\n        .setName(faker.howIMetYourMother().character())\\n        .setBirthDate(LocalDate.now())\\n        .setAddress(faker.address().fullAddress())\\n        .setEmail(faker.internet().emailAddress());\\n    ResponseEntity<Void> resp = userApiClient.save(userToSave);\\n    assertThat(resp.getStatusCode()).isEqualTo(CREATED);\\n    UserDTO savedUser = UserDTO.fromDTO(userToSave, getUserId(resp));\\n    ResponseEntity<UserDTO> respGetById = userApiClient.getById(savedUser.getId());\\n    assertThat(respGetById.getStatusCode()).isEqualTo(OK);\\n    assertThat(respGetById.getBody()).isEqualTo(savedUser);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"@Test\\n@DisplayName(\\\"Save and get user with just required fields filled successfully\\\")\\nvoid requiredFieldsFilled() {\\n    CreateUserDTO userToSave = new CreateUserDTO()\\n        .setCpf(CPF.generate())\\n        .setName(faker.name().fullName())\\n        .setBirthDate(LocalDate.now());\\n    ResponseEntity<Void> resp = userApiClient.save(userToSave);\\n    assertThat(resp.getStatusCode()).isEqualTo(CREATED);\\n    UserDTO savedUser = UserDTO.fromDTO(userToSave, getUserId(resp));\\n    ResponseEntity<UserDTO> respGetById = userApiClient.getById(savedUser.getId());\\n    assertThat(respGetById.getStatusCode()).isEqualTo(OK);\\n    assertThat(respGetById.getBody()).isEqualTo(savedUser);\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"10:15\",\n    \"10:15\": true\n  }), \"@Test\\n@DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\nvoid allFieldsFilledProperly() {\\n    CreateUserDTO userToSave = new CreateUserDTO()\\n        .setCpf(CPF.generate())\\n        .setName(faker.howIMetYourMother().character())\\n        .setBirthDate(LocalDate.now())\\n        .setAddress(faker.address().fullAddress())\\n        .setEmail(faker.internet().emailAddress());\\n    ResponseEntity<Void> resp = userApiClient.save(userToSave);\\n    assertThat(resp.getStatusCode()).isEqualTo(CREATED);\\n    UserDTO savedUser = UserDTO.fromDTO(userToSave, getUserId(resp));\\n    ResponseEntity<UserDTO> respGetById = userApiClient.getById(savedUser.getId());\\n    assertThat(respGetById.getStatusCode()).isEqualTo(OK);\\n    assertThat(respGetById.getBody()).isEqualTo(savedUser);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"8:13\",\n    \"8:13\": true\n  }), \"@Test\\n@DisplayName(\\\"Save and get user with just required fields filled successfully\\\")\\nvoid requiredFieldsFilled() {\\n    CreateUserDTO userToSave = new CreateUserDTO()\\n        .setCpf(CPF.generate())\\n        .setName(faker.name().fullName())\\n        .setBirthDate(LocalDate.now());\\n    ResponseEntity<Void> resp = userApiClient.save(userToSave);\\n    assertThat(resp.getStatusCode()).isEqualTo(CREATED);\\n    UserDTO savedUser = UserDTO.fromDTO(userToSave, getUserId(resp));\\n    ResponseEntity<UserDTO> respGetById = userApiClient.getById(savedUser.getId());\\n    assertThat(respGetById.getStatusCode()).isEqualTo(OK);\\n    assertThat(respGetById.getBody()).isEqualTo(savedUser);\\n}\\n\")))), mdx(\"hr\", null), mdx(Surfer, {\n    mdxType: \"Surfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"ResponseEntity<Void> resp = userApiClient.save(userToSave);\\nassertThat(resp.getStatusCode()).isEqualTo(CREATED);\\nUserDTO savedUser = UserDTO.fromDTO(userToSave, getUserId(resp));\\nResponseEntity<UserDTO> respGetById = userApiClient.getById(savedUser.getId());\\nassertThat(respGetById.getStatusCode()).isEqualTo(OK);\\nassertThat(respGetById.getBody()).isEqualTo(savedUser);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \" private void assertSaveUserSuccessfully(CreateUserDTO userToSave) {\\n    ResponseEntity<Void> resp = userApiClient.save(userToSave);\\n    assertThat(resp.getStatusCode()).isEqualTo(CREATED);\\n    UserDTO savedUser = UserDTO.fromDTO(userToSave, getUserId(resp));\\n    ResponseEntity<UserDTO> respGetById = userApiClient.getById(savedUser.getId());\\n    assertThat(respGetById.getStatusCode()).isEqualTo(OK);\\n    assertThat(respGetById.getBody()).isEqualTo(savedUser);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"5:7\",\n    \"5:7\": true\n  }), \" private void assertSaveUserSuccessfully(CreateUserDTO userToSave) {\\n    ResponseEntity<Void> resp = userApiClient.save(userToSave);\\n    assertThat(resp.getStatusCode()).isEqualTo(CREATED);\\n    UserDTO savedUser = UserDTO.fromDTO(userToSave, getUserId(resp));\\n    ResponseEntity<UserDTO> respGetById = userApiClient.getById(savedUser.getId());\\n    assertThat(respGetById.getStatusCode()).isEqualTo(OK);\\n    assertThat(respGetById.getBody()).isEqualTo(savedUser);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \" private void assertSaveUserSuccessfully(CreateUserDTO userToSave) {\\n    ResponseEntity<Void> resp = userApiClient.save(userToSave);\\n    assertThat(resp.getStatusCode()).isEqualTo(CREATED);\\n    UserDTO savedUser = UserDTO.fromDTO(userToSave, getUserId(resp));\\n    assertGetByID(savedUser);\\n}\\n\\nprivate void assertGetByID(UserDTO expected) {\\n    ResponseEntity<UserDTO> resp = userApiClient.getById(expected.getId());\\n    assertThat(resp.getStatusCode()).isEqualTo(OK);\\n    assertThat(resp.getBody()).isEqualTo(expected);\\n}\\n\"))), mdx(\"hr\", null), mdx(Background, {\n    mdxType: \"Background\"\n  }), mdx(L.Row, null, mdx(Done, {\n    style: {\n      height: \"200px\"\n    },\n    mdxType: \"Done\"\n  }), mdx(\"h3\", {\n    style: {\n      color: \"gray\"\n    }\n  }, \" C\\xF3digo refatorado \")), mdx(\"hr\", null), mdx(Surfer, {\n    mdxType: \"Surfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"10\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"10\"\n  }), \"@Test\\n@DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\nvoid allFieldsFilledProperly() {\\n    CreateUserDTO userToSave = new CreateUserDTO()\\n        .setCpf(CPF.generate())\\n        .setName(faker.howIMetYourMother().character())\\n        .setBirthDate(LocalDate.now())\\n        .setAddress(faker.address().fullAddress())\\n        .setEmail(faker.internet().emailAddress());\\n    assertSaveUserSuccessfully(userToSave);\\n}\\n\\n@DisplayName(\\\"Save and get user with just required fields filled successfully\\\")\\nvoid requiredFieldsFilled() {\\n    CreateUserDTO userToSave = new CreateUserDTO()\\n        .setCpf(CPF.generate())\\n        .setName(faker.name().fullName())\\n        .setBirthDate(LocalDate.now());\\n    assertSaveUserSuccessfully(userToSave);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"19\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"19\"\n  }), \"@Test\\n@DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\nvoid allFieldsFilledProperly() {\\n    CreateUserDTO userToSave = new CreateUserDTO()\\n        .setCpf(CPF.generate())\\n        .setName(faker.howIMetYourMother().character())\\n        .setBirthDate(LocalDate.now())\\n        .setAddress(faker.address().fullAddress())\\n        .setEmail(faker.internet().emailAddress());\\n    assertSaveUserSuccessfully(userToSave);\\n}\\n\\n@DisplayName(\\\"Save and get user with just required fields filled successfully\\\")\\nvoid requiredFieldsFilled() {\\n    CreateUserDTO userToSave = new CreateUserDTO()\\n        .setCpf(CPF.generate())\\n        .setName(faker.name().fullName())\\n        .setBirthDate(LocalDate.now());\\n    assertSaveUserSuccessfully(userToSave);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"@Test\\n@DisplayName(\\\"Error to save user with invalid e-mail and repeated cpf\\\")\\nvoid invalidEmailAndRepeatedCpf() {\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"4:9\",\n    \"4:9\": true\n  }), \"@Test\\n@DisplayName(\\\"Error to save user with invalid e-mail and repeated cpf\\\")\\nvoid invalidEmailAndRepeatedCpf() {\\n    CreateUserDTO validUser = new CreateUserDTO()\\n        .setCpf(CPF.generate())\\n        .setName(faker.howIMetYourMother().character())\\n        .setBirthDate(LocalDate.now())\\n        .setAddress(faker.address().fullAddress())\\n        .setEmail(faker.internet().emailAddress());\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"10\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"10\"\n  }), \"@Test\\n@DisplayName(\\\"Error to save user with invalid e-mail and repeated cpf\\\")\\nvoid invalidEmailAndRepeatedCpf() {\\n    CreateUserDTO validUser = new CreateUserDTO()\\n        .setCpf(CPF.generate())\\n        .setName(faker.howIMetYourMother().character())\\n        .setBirthDate(LocalDate.now())\\n        .setAddress(faker.address().fullAddress())\\n        .setEmail(faker.internet().emailAddress());\\n    assertSaveUserSuccessfully(validUser);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"11\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"11 title=\\\"É criado um usuário a partir do usuário salvo com um e-mail inválido\\\"\",\n    \"title\": \"\\\"É\",\n    \"criado\": true,\n    \"um\": true,\n    \"usuário\": true,\n    \"a\": true,\n    \"partir\": true,\n    \"do\": true,\n    \"salvo\": true,\n    \"com\": true,\n    \"e-mail\": true,\n    \"inválido\\\"\": true\n  }), \"@Test\\n@DisplayName(\\\"Error to save user with invalid e-mail and repeated cpf\\\")\\nvoid invalidEmailAndRepeatedCpf() {\\n    CreateUserDTO validUser = new CreateUserDTO()\\n        .setCpf(CPF.generate())\\n        .setName(faker.howIMetYourMother().character())\\n        .setBirthDate(LocalDate.now())\\n        .setAddress(faker.address().fullAddress())\\n        .setEmail(faker.internet().emailAddress());\\n    assertSaveUserSuccessfully(validUser);\\n    CreateUserDTO invalidUser = validUser.withEmail(\\\"ronaldo\\\");\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"12:15\",\n    \"12:15\": true\n  }), \"@Test\\n@DisplayName(\\\"Error to save user with invalid e-mail and repeated cpf\\\")\\nvoid invalidEmailAndRepeatedCpf() {\\n    CreateUserDTO validUser = new CreateUserDTO()\\n        .setCpf(CPF.generate())\\n        .setName(faker.howIMetYourMother().character())\\n        .setBirthDate(LocalDate.now())\\n        .setAddress(faker.address().fullAddress())\\n        .setEmail(faker.internet().emailAddress());\\n    assertSaveUserSuccessfully(validUser);\\n    CreateUserDTO invalidUser = validUser.withEmail(\\\"ronaldo\\\");\\n    ErrorDTO expectedError = new ErrorDTO()\\n        .setCode(ValidationException.CODE_ERROR)\\n        .addError(\\\"email\\\", \\\"must be a well-formed email address\\\")\\n        .addError(\\\"cpf\\\", \\\"value already registered\\\");\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"16\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"16\"\n  }), \"@Test\\n@DisplayName(\\\"Error to save user with invalid e-mail and repeated cpf\\\")\\nvoid invalidEmailAndRepeatedCpf() {\\n    CreateUserDTO validUser = new CreateUserDTO()\\n        .setCpf(CPF.generate())\\n        .setName(faker.howIMetYourMother().character())\\n        .setBirthDate(LocalDate.now())\\n        .setAddress(faker.address().fullAddress())\\n        .setEmail(faker.internet().emailAddress());\\n    assertSaveUserSuccessfully(validUser);\\n    CreateUserDTO invalidUser = validUser.withEmail(\\\"ronaldo\\\");\\n    ErrorDTO expectedError = new ErrorDTO()\\n        .setCode(ValidationException.CODE_ERROR)\\n        .addError(\\\"email\\\", \\\"must be a well-formed email address\\\")\\n        .addError(\\\"cpf\\\", \\\"value already registered\\\");\\n    ResponseEntity<ErrorDTO> resp = userApiClient.save(invalidUser, ErrorDTO.class);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"17\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"17\"\n  }), \"@Test\\n@DisplayName(\\\"Error to save user with invalid e-mail and repeated cpf\\\")\\nvoid invalidEmailAndRepeatedCpf() {\\n    CreateUserDTO validUser = new CreateUserDTO()\\n        .setCpf(CPF.generate())\\n        .setName(faker.howIMetYourMother().character())\\n        .setBirthDate(LocalDate.now())\\n        .setAddress(faker.address().fullAddress())\\n        .setEmail(faker.internet().emailAddress());\\n    assertSaveUserSuccessfully(validUser);\\n    CreateUserDTO invalidUser = validUser.withEmail(\\\"ronaldo\\\");\\n    ErrorDTO expectedError = new ErrorDTO()\\n        .setCode(ValidationException.CODE_ERROR)\\n        .addError(\\\"email\\\", \\\"must be a well-formed email address\\\")\\n        .addError(\\\"cpf\\\", \\\"value already registered\\\");\\n    ResponseEntity<ErrorDTO> resp = userApiClient.save(invalidUser, ErrorDTO.class);\\n    assertThat(resp.getStatusCode()).isEqualTo(BAD_REQUEST);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"18\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"18\"\n  }), \"@Test\\n@DisplayName(\\\"Error to save user with invalid e-mail and repeated cpf\\\")\\nvoid invalidEmailAndRepeatedCpf() {\\n    CreateUserDTO validUser = new CreateUserDTO()\\n        .setCpf(CPF.generate())\\n        .setName(faker.howIMetYourMother().character())\\n        .setBirthDate(LocalDate.now())\\n        .setAddress(faker.address().fullAddress())\\n        .setEmail(faker.internet().emailAddress());\\n    assertSaveUserSuccessfully(validUser);\\n    CreateUserDTO invalidUser = validUser.withEmail(\\\"ronaldo\\\");\\n    ErrorDTO expectedError = new ErrorDTO()\\n        .setCode(ValidationException.CODE_ERROR)\\n        .addError(\\\"email\\\", \\\"must be a well-formed email address\\\")\\n        .addError(\\\"cpf\\\", \\\"value already registered\\\");\\n    ResponseEntity<ErrorDTO> resp = userApiClient.save(invalidUser, ErrorDTO.class);\\n    assertThat(resp.getStatusCode()).isEqualTo(BAD_REQUEST);\\n    assertThat(resp.getBody()).isEqualTo(expectedError);\\n}\\n\"))), mdx(\"hr\", null), mdx(Background, {\n    mdxType: \"Background\"\n  }), mdx(L.Row, null, mdx(Done, {\n    style: {\n      height: \"200px\"\n    },\n    mdxType: \"Done\"\n  }), mdx(\"h3\", {\n    style: {\n      color: \"gray\"\n    }\n  }, \" Teste validando regras de valida\\xE7\\xE3o de e-mail e cpf \\xFAnico\")), mdx(\"hr\", null), mdx(Surfer, {\n    mdxType: \"Surfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"1:3\",\n    \"1:3\": true\n  }), \"@Test\\n@DisplayName(\\\"Error to save user with invalid e-mail, address, name, cpf and birth date\\\")\\nvoid invalidEmailAddressNameCpfAndBirthDate() {\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"4:9\",\n    \"4:9\": true\n  }), \"@Test\\n@DisplayName(\\\"Error to save user with invalid e-mail, address, name, cpf and birth date\\\")\\nvoid invalidEmailAddressNameCpfAndBirthDate() {\\n    CreateUserDTO userToSave = new CreateUserDTO()\\n        .setEmail(\\\"Goku > Naruto\\\")\\n        .setAddress(\\\"_\\\")\\n        .setCpf(\\\"bolacha ou biscoito?\\\")\\n        .setName(\\\"_\\\")\\n        .setBirthDate(LocalDate.now().plusDays(1));\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"10:16\",\n    \"10:16\": true\n  }), \"@Test\\n@DisplayName(\\\"Error to save user with invalid e-mail, address, name, cpf and birth date\\\")\\nvoid invalidEmailAddressNameCpfAndBirthDate() {\\n    CreateUserDTO userToSave = new CreateUserDTO()\\n        .setEmail(\\\"Goku > Naruto\\\")\\n        .setAddress(\\\"_\\\")\\n        .setCpf(\\\"bolacha ou biscoito?\\\")\\n        .setName(\\\"_\\\")\\n        .setBirthDate(LocalDate.now().plusDays(1));\\n     ErrorDTO expectedError = new ErrorDTO()\\n        .setCode(ValidationException.CODE_ERROR)\\n        .addError(\\\"address\\\", \\\"size must be between 5 and 254\\\")\\n        .addError(\\\"name\\\", \\\"size must be between 3 and 90\\\")\\n        .addError(\\\"cpf\\\", \\\"invalid Brazilian individual taxpayer registry number (CPF)\\\")\\n        .addError(\\\"email\\\", \\\"must be a well-formed email address\\\")\\n        .addError(\\\"birthDate\\\", \\\"must be a date in the past or in the present\\\");\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"17\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"17\"\n  }), \"@Test\\n@DisplayName(\\\"Error to save user with invalid e-mail, address, name, cpf and birth date\\\")\\nvoid invalidEmailAddressNameCpfAndBirthDate() {\\n    CreateUserDTO userToSave = new CreateUserDTO()\\n        .setEmail(\\\"Goku > Naruto\\\")\\n        .setAddress(\\\"_\\\")\\n        .setCpf(\\\"bolacha ou biscoito?\\\")\\n        .setName(\\\"_\\\")\\n        .setBirthDate(LocalDate.now().plusDays(1));\\n     ErrorDTO expectedError = new ErrorDTO()\\n        .setCode(ValidationException.CODE_ERROR)\\n        .addError(\\\"address\\\", \\\"size must be between 5 and 254\\\")\\n        .addError(\\\"name\\\", \\\"size must be between 3 and 90\\\")\\n        .addError(\\\"cpf\\\", \\\"invalid Brazilian individual taxpayer registry number (CPF)\\\")\\n        .addError(\\\"email\\\", \\\"must be a well-formed email address\\\")\\n        .addError(\\\"birthDate\\\", \\\"must be a date in the past or in the present\\\");\\n    ResponseEntity<ErrorDTO> resp = userApiClient.save(userToSave, ErrorDTO.class);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"18\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"18\"\n  }), \"@Test\\n@DisplayName(\\\"Error to save user with invalid e-mail, address, name, cpf and birth date\\\")\\nvoid invalidEmailAddressNameCpfAndBirthDate() {\\n    CreateUserDTO userToSave = new CreateUserDTO()\\n        .setEmail(\\\"Goku > Naruto\\\")\\n        .setAddress(\\\"_\\\")\\n        .setCpf(\\\"bolacha ou biscoito?\\\")\\n        .setName(\\\"_\\\")\\n        .setBirthDate(LocalDate.now().plusDays(1));\\n     ErrorDTO expectedError = new ErrorDTO()\\n        .setCode(ValidationException.CODE_ERROR)\\n        .addError(\\\"address\\\", \\\"size must be between 5 and 254\\\")\\n        .addError(\\\"name\\\", \\\"size must be between 3 and 90\\\")\\n        .addError(\\\"cpf\\\", \\\"invalid Brazilian individual taxpayer registry number (CPF)\\\")\\n        .addError(\\\"email\\\", \\\"must be a well-formed email address\\\")\\n        .addError(\\\"birthDate\\\", \\\"must be a date in the past or in the present\\\");\\n    ResponseEntity<ErrorDTO> resp = userApiClient.save(userToSave, ErrorDTO.class);\\n    assertThat(resp.getStatusCode()).isEqualTo(BAD_REQUEST);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"19\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"19\"\n  }), \"@Test\\n@DisplayName(\\\"Error to save user with invalid e-mail, address, name, cpf and birth date\\\")\\nvoid invalidEmailAddressNameCpfAndBirthDate() {\\n    CreateUserDTO userToSave = new CreateUserDTO()\\n        .setEmail(\\\"Goku > Naruto\\\")\\n        .setAddress(\\\"_\\\")\\n        .setCpf(\\\"bolacha ou biscoito?\\\")\\n        .setName(\\\"_\\\")\\n        .setBirthDate(LocalDate.now().plusDays(1));\\n     ErrorDTO expectedError = new ErrorDTO()\\n        .setCode(ValidationException.CODE_ERROR)\\n        .addError(\\\"address\\\", \\\"size must be between 5 and 254\\\")\\n        .addError(\\\"name\\\", \\\"size must be between 3 and 90\\\")\\n        .addError(\\\"cpf\\\", \\\"invalid Brazilian individual taxpayer registry number (CPF)\\\")\\n        .addError(\\\"email\\\", \\\"must be a well-formed email address\\\")\\n        .addError(\\\"birthDate\\\", \\\"must be a date in the past or in the present\\\");\\n    ResponseEntity<ErrorDTO> resp = userApiClient.save(userToSave, ErrorDTO.class);\\n    assertThat(resp.getStatusCode()).isEqualTo(BAD_REQUEST);\\n    assertThat(resp.getBody()).isEqualTo(expectedError);\\n}\\n\"))), mdx(\"hr\", null), mdx(Background, {\n    mdxType: \"Background\"\n  }), mdx(L.Row, null, mdx(Done, {\n    style: {\n      height: \"200px\"\n    },\n    mdxType: \"Done\"\n  }), mdx(\"h3\", {\n    style: {\n      color: \"gray\"\n    }\n  }, \" Teste validando as regras de valida\\xE7\\xE3o do endere\\xE7o, nome, cpf, e-mail e data de nascimento\")), mdx(\"hr\", null), mdx(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\"\n    }\n  }, mdx(\"p\", {\n    style: {\n      color: \"rgb(253, 71, 85)\",\n      fontSize: \"40px\"\n    }\n  }, \"Alerta de c\\xF3digo duplicado!!!\"), mdx(Alert, {\n    style: {\n      height: \"200px\"\n    },\n    mdxType: \"Alert\"\n  })), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"@Test\\n@DisplayName(\\\"Error to save user with invalid e-mail and repeated cpf\\\")\\nvoid invalidEmailAndRepeatedCpf() {\\n    CreateUserDTO validUser = new CreateUserDTO()\\n        .setCpf(CPF.generate())\\n        .setName(faker.howIMetYourMother().character())\\n        .setBirthDate(LocalDate.now())\\n        .setAddress(faker.address().fullAddress())\\n        .setEmail(faker.internet().emailAddress());\\n    assertSaveUserSuccessfully(validUser);\\n    CreateUserDTO invalidUser = validUser.withEmail(\\\"ronaldo\\\");\\n    ErrorDTO expectedError = new ErrorDTO()\\n        .setCode(ValidationException.CODE_ERROR)\\n        .addError(\\\"email\\\", \\\"must be a well-formed email address\\\")\\n        .addError(\\\"cpf\\\", \\\"value already registered\\\");\\n    ResponseEntity<ErrorDTO> resp = userApiClient.save(invalidUser, ErrorDTO.class);\\n    assertThat(resp.getStatusCode()).isEqualTo(BAD_REQUEST);\\n    assertThat(resp.getBody()).isEqualTo(expectedError);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"@Test\\n@DisplayName(\\\"Error to save user with invalid e-mail, address, name, cpf and birth date\\\")\\nvoid invalidEmailAddressNameCpfAndBirthDate() {\\n    CreateUserDTO userToSave = new CreateUserDTO()\\n        .setEmail(\\\"Goku > Naruto\\\")\\n        .setAddress(\\\"_\\\")\\n        .setCpf(\\\"bolacha ou biscoito?\\\")\\n        .setName(\\\"_\\\")\\n        .setBirthDate(LocalDate.now().plusDays(1));\\n     ErrorDTO expectedError = new ErrorDTO()\\n        .setCode(ValidationException.CODE_ERROR)\\n        .addError(\\\"address\\\", \\\"size must be between 5 and 254\\\")\\n        .addError(\\\"name\\\", \\\"size must be between 3 and 90\\\")\\n        .addError(\\\"cpf\\\", \\\"invalid Brazilian individual taxpayer registry number (CPF)\\\")\\n        .addError(\\\"email\\\", \\\"must be a well-formed email address\\\")\\n        .addError(\\\"birthDate\\\", \\\"must be a date in the past or in the present\\\");\\n    ResponseEntity<ErrorDTO> resp = userApiClient.save(userToSave, ErrorDTO.class);\\n    assertThat(resp.getStatusCode()).isEqualTo(BAD_REQUEST);\\n    assertThat(resp.getBody()).isEqualTo(expectedError);\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"16:18\",\n    \"16:18\": true\n  }), \"@Test\\n@DisplayName(\\\"Error to save user with invalid e-mail and repeated cpf\\\")\\nvoid invalidEmailAndRepeatedCpf() {\\n    CreateUserDTO validUser = new CreateUserDTO()\\n        .setCpf(CPF.generate())\\n        .setName(faker.howIMetYourMother().character())\\n        .setBirthDate(LocalDate.now())\\n        .setAddress(faker.address().fullAddress())\\n        .setEmail(faker.internet().emailAddress());\\n    assertSaveUserSuccessfully(validUser);\\n    CreateUserDTO invalidUser = validUser.withEmail(\\\"ronaldo\\\");\\n    ErrorDTO expectedError = new ErrorDTO()\\n        .setCode(ValidationException.CODE_ERROR)\\n        .addError(\\\"email\\\", \\\"must be a well-formed email address\\\")\\n        .addError(\\\"cpf\\\", \\\"value already registered\\\");\\n    ResponseEntity<ErrorDTO> resp = userApiClient.save(invalidUser, ErrorDTO.class);\\n    assertThat(resp.getStatusCode()).isEqualTo(BAD_REQUEST);\\n    assertThat(resp.getBody()).isEqualTo(expectedError);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"17:19\",\n    \"17:19\": true\n  }), \"@Test\\n@DisplayName(\\\"Error to save user with invalid e-mail, address, name, cpf and birth date\\\")\\nvoid invalidEmailAddressNameCpfAndBirthDate() {\\n    CreateUserDTO userToSave = new CreateUserDTO()\\n        .setEmail(\\\"Goku > Naruto\\\")\\n        .setAddress(\\\"_\\\")\\n        .setCpf(\\\"bolacha ou biscoito?\\\")\\n        .setName(\\\"_\\\")\\n        .setBirthDate(LocalDate.now().plusDays(1));\\n     ErrorDTO expectedError = new ErrorDTO()\\n        .setCode(ValidationException.CODE_ERROR)\\n        .addError(\\\"address\\\", \\\"size must be between 5 and 254\\\")\\n        .addError(\\\"name\\\", \\\"size must be between 3 and 90\\\")\\n        .addError(\\\"cpf\\\", \\\"invalid Brazilian individual taxpayer registry number (CPF)\\\")\\n        .addError(\\\"email\\\", \\\"must be a well-formed email address\\\")\\n        .addError(\\\"birthDate\\\", \\\"must be a date in the past or in the present\\\");\\n    ResponseEntity<ErrorDTO> resp = userApiClient.save(userToSave, ErrorDTO.class);\\n    assertThat(resp.getStatusCode()).isEqualTo(BAD_REQUEST);\\n    assertThat(resp.getBody()).isEqualTo(expectedError);\\n}\\n\")))), mdx(\"hr\", null), mdx(Surfer, {\n    mdxType: \"Surfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"ResponseEntity<ErrorDTO> resp = userApiClient.save(userToSave, ErrorDTO.class);\\nassertThat(resp.getStatusCode()).isEqualTo(BAD_REQUEST);\\nassertThat(resp.getBody()).isEqualTo(expectedError);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"private void assertValidationError(CreateUserDTO user, ErrorDTO error) {\\n    ResponseEntity<ErrorDTO> resp = userApiClient.save(user, ErrorDTO.class);\\n    assertThat(resp.getStatusCode()).isEqualTo(BAD_REQUEST);\\n    assertThat(resp.getBody()).isEqualTo(error);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"16\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"16\"\n  }), \"@Test\\n@DisplayName(\\\"Error to save user with invalid e-mail and repeated cpf\\\")\\nvoid invalidEmailAndRepeatedCpf() {\\n    CreateUserDTO validUser = new CreateUserDTO()\\n        .setCpf(CPF.generate())\\n        .setName(faker.howIMetYourMother().character())\\n        .setBirthDate(LocalDate.now())\\n        .setAddress(faker.address().fullAddress())\\n        .setEmail(faker.internet().emailAddress());\\n    assertSaveUserSuccessfully(validUser);\\n    CreateUserDTO invalidUser = validUser.withEmail(\\\"ronaldo\\\");\\n    ErrorDTO expectedError = new ErrorDTO()\\n        .setCode(ValidationException.CODE_ERROR)\\n        .addError(\\\"email\\\", \\\"must be a well-formed email address\\\")\\n        .addError(\\\"cpf\\\", \\\"value already registered\\\");\\n    assertValidationError(userToSave, expectedError);\\n}\\n\\n@Test\\n@DisplayName(\\\"Error to save user with invalid e-mail, address, name, cpf and birth date\\\")\\nvoid invalidEmailAddressNameCpfAndBirthDate() {\\n    CreateUserDTO userToSave = new CreateUserDTO()\\n        .setEmail(\\\"Goku > Naruto\\\")\\n        .setAddress(\\\"_\\\")\\n        .setCpf(\\\"bolacha ou biscoito?\\\")\\n        .setName(\\\"_\\\")\\n        .setBirthDate(LocalDate.now().plusDays(1));\\n     ErrorDTO expectedError = new ErrorDTO()\\n        .setCode(ValidationException.CODE_ERROR)\\n        .addError(\\\"address\\\", \\\"size must be between 5 and 254\\\")\\n        .addError(\\\"name\\\", \\\"size must be between 3 and 90\\\")\\n        .addError(\\\"cpf\\\", \\\"invalid Brazilian individual taxpayer registry number (CPF)\\\")\\n        .addError(\\\"email\\\", \\\"must be a well-formed email address\\\")\\n        .addError(\\\"birthDate\\\", \\\"must be a date in the past or in the present\\\");\\n    assertValidationError(userToSave, expectedError);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"35\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"35\"\n  }), \"@Test\\n@DisplayName(\\\"Error to save user with invalid e-mail and repeated cpf\\\")\\nvoid invalidEmailAndRepeatedCpf() {\\n    CreateUserDTO validUser = new CreateUserDTO()\\n        .setCpf(CPF.generate())\\n        .setName(faker.howIMetYourMother().character())\\n        .setBirthDate(LocalDate.now())\\n        .setAddress(faker.address().fullAddress())\\n        .setEmail(faker.internet().emailAddress());\\n    assertSaveUserSuccessfully(validUser);\\n    CreateUserDTO invalidUser = validUser.withEmail(\\\"ronaldo\\\");\\n    ErrorDTO expectedError = new ErrorDTO()\\n        .setCode(ValidationException.CODE_ERROR)\\n        .addError(\\\"email\\\", \\\"must be a well-formed email address\\\")\\n        .addError(\\\"cpf\\\", \\\"value already registered\\\");\\n    assertValidationError(userToSave, expectedError);\\n}\\n\\n@Test\\n@DisplayName(\\\"Error to save user with invalid e-mail, address, name, cpf and birth date\\\")\\nvoid invalidEmailAddressNameCpfAndBirthDate() {\\n    CreateUserDTO userToSave = new CreateUserDTO()\\n        .setEmail(\\\"Goku > Naruto\\\")\\n        .setAddress(\\\"_\\\")\\n        .setCpf(\\\"bolacha ou biscoito?\\\")\\n        .setName(\\\"_\\\")\\n        .setBirthDate(LocalDate.now().plusDays(1));\\n     ErrorDTO expectedError = new ErrorDTO()\\n        .setCode(ValidationException.CODE_ERROR)\\n        .addError(\\\"address\\\", \\\"size must be between 5 and 254\\\")\\n        .addError(\\\"name\\\", \\\"size must be between 3 and 90\\\")\\n        .addError(\\\"cpf\\\", \\\"invalid Brazilian individual taxpayer registry number (CPF)\\\")\\n        .addError(\\\"email\\\", \\\"must be a well-formed email address\\\")\\n        .addError(\\\"birthDate\\\", \\\"must be a date in the past or in the present\\\");\\n    assertValidationError(userToSave, expectedError);\\n}\\n\"))), mdx(\"hr\", null), mdx(Background, {\n    mdxType: \"Background\"\n  }), mdx(L.Row, null, mdx(Done, {\n    style: {\n      height: \"200px\"\n    },\n    mdxType: \"Done\"\n  }), mdx(\"h3\", {\n    style: {\n      color: \"gray\"\n    }\n  }, \" C\\xF3digo refatorado \")), mdx(\"hr\", null), mdx(Surfer, {\n    mdxType: \"Surfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"@Test\\n@DisplayName(\\\"Error to save user without any field filled\\\")\\nvoid noFieldFilled() {\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"4\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"4\"\n  }), \"@Test\\n@DisplayName(\\\"Error to save user without any field filled\\\")\\nvoid noFieldFilled() {\\n    CreateUserDTO userToSave = new CreateUserDTO();\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"5:9\",\n    \"5:9\": true\n  }), \"@Test\\n@DisplayName(\\\"Error to save user without any field filled\\\")\\nvoid noFieldFilled() {\\n    CreateUserDTO userToSave = new CreateUserDTO();\\n    ErrorDTO expectedError = new ErrorDTO()\\n        .setCode(ValidationException.CODE_ERROR)\\n        .addError(\\\"name\\\", \\\"must not be blank\\\")\\n        .addError(\\\"cpf\\\", \\\"must not be null\\\")\\n        .addError(\\\"birthDate\\\", \\\"must not be null\\\");\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"10\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"10\"\n  }), \"@Test\\n@DisplayName(\\\"Error to save user without any field filled\\\")\\nvoid noFieldFilled() {\\n    CreateUserDTO userToSave = new CreateUserDTO();\\n    ErrorDTO expectedError = new ErrorDTO()\\n        .setCode(ValidationException.CODE_ERROR)\\n        .addError(\\\"name\\\", \\\"must not be blank\\\")\\n        .addError(\\\"cpf\\\", \\\"must not be null\\\")\\n        .addError(\\\"birthDate\\\", \\\"must not be null\\\");\\n    ResponseEntity<ErrorDTO> resp = userApiClient.save(userToSave, ErrorDTO.class);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"11\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"11\"\n  }), \"@Test\\n@DisplayName(\\\"Error to save user without any field filled\\\")\\nvoid noFieldFilled() {\\n    CreateUserDTO userToSave = new CreateUserDTO();\\n    ErrorDTO expectedError = new ErrorDTO()\\n        .setCode(ValidationException.CODE_ERROR)\\n        .addError(\\\"name\\\", \\\"must not be blank\\\")\\n        .addError(\\\"cpf\\\", \\\"must not be null\\\")\\n        .addError(\\\"birthDate\\\", \\\"must not be null\\\");\\n    ResponseEntity<ErrorDTO> resp = userApiClient.save(userToSave, ErrorDTO.class);\\n    assertValidationError(userToSave, expectedError);\\n}\\n\"))), mdx(\"hr\", null), mdx(Background, {\n    mdxType: \"Background\"\n  }), mdx(L.Row, null, mdx(Done, {\n    style: {\n      height: \"200px\"\n    },\n    mdxType: \"Done\"\n  }), mdx(\"h3\", {\n    style: {\n      color: \"gray\"\n    }\n  }, \"Testado campos obrigat\\xF3rios\")), mdx(\"hr\", null), mdx(L.Column, {\n    sx: {\n      width: \"110%\"\n    }\n  }, mdx(\"h2\", null, \"Foi solicitado agora que ...\")), mdx(\"hr\", null), mdx(L.Column, null, mdx(\"h2\", null, \"Toda vez que um novo usu\\xE1rio for cadastrado deve:\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Gerar um evento chamado \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"\\\"UserRegisteredEvent\\\"\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Esse evento deve ser publicado em outro sistema via \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"chamada HTTP\"))))), mdx(\"hr\", null), mdx(Surfer, {\n    mdxType: \"Surfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"@Getter\\n@ToString\\n@EqualsAndHashCode\\npublic abstract class Event {\\n\\n    @With\\n    private final UUID id;\\n    private final String type;\\n\\n    protected Event(UUID id, String type) {\\n        this.id = id;\\n        this.type = type;\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"1:10\",\n    \"1:10\": true\n  }), \"@Getter\\n@ToString(callSuper = true)\\n@EqualsAndHashCode(callSuper = true)\\npublic class UserRegisteredEvent extends Event {\\n\\n    private static final String TYPE = \\\"UserRegistered\\\";\\n\\n    private final String name;\\n    private final String cpf;\\n    private final String email;\\n\\n    @Builder\\n    private UserRegisteredEvent(UUID id, String name, String cpf, String email) {\\n        super(id, TYPE);\\n        this.name = name;\\n        this.cpf = cpf;\\n        this.email = email;\\n    }\\n\\n    public static UserRegisteredEvent from(UserEntity user) {\\n        return UserRegisteredEvent\\n            .builder()\\n            .name(user.getName())\\n            .cpf(user.getCpf())\\n            .email(user.getEmail())\\n            .build();\\n    }\\n\\n    @Override\\n    public Event withId(UUID id) {\\n        return new UserRegisteredEvent(id, name, cpf, email);\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"12:33\",\n    \"12:33\": true\n  }), \"@Getter\\n@ToString(callSuper = true)\\n@EqualsAndHashCode(callSuper = true)\\npublic class UserRegisteredEvent extends Event {\\n\\n    private static final String TYPE = \\\"UserRegistered\\\";\\n\\n    private final String name;\\n    private final String cpf;\\n    private final String email;\\n\\n    @Builder\\n    private UserRegisteredEvent(UUID id, String name, String cpf, String email) {\\n        super(id, TYPE);\\n        this.name = name;\\n        this.cpf = cpf;\\n        this.email = email;\\n    }\\n\\n    public static UserRegisteredEvent from(UserEntity user) {\\n        return UserRegisteredEvent\\n            .builder()\\n            .name(user.getName())\\n            .cpf(user.getCpf())\\n            .email(user.getEmail())\\n            .build();\\n    }\\n\\n    @Override\\n    public Event withId(UUID id) {\\n        return new UserRegisteredEvent(id, name, cpf, email);\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"@Repository\\npublic class EventRepositoryHttp implements EventRepository {\\n\\n    private String uri;\\n    private final RestTemplate restTemplate;\\n\\n    @Autowired\\n    public EventRepositoryHttp(@Value(\\\"${publisher.uri}\\\") String uri, RestTemplate restTemplate) {\\n        this.uri = uri;\\n        this.restTemplate = restTemplate;\\n    }\\n\\n    @Override\\n    public void publish(Event event) {\\n        restTemplate.postForEntity(uri, event, String.class);\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"4:5\",\n    \"4:5\": true\n  }), \"@Repository\\npublic class EventRepositoryHttp implements EventRepository {\\n\\n    private String uri;\\n    private final RestTemplate restTemplate;\\n\\n    @Autowired\\n    public EventRepositoryHttp(@Value(\\\"${publisher.uri}\\\") String uri, RestTemplate restTemplate) {\\n        this.uri = uri;\\n        this.restTemplate = restTemplate;\\n    }\\n\\n    @Override\\n    public void publish(Event event) {\\n        restTemplate.postForEntity(uri, event, String.class);\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"14\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"14\"\n  }), \"@Repository\\npublic class EventRepositoryHttp implements EventRepository {\\n\\n    private String uri;\\n    private final RestTemplate restTemplate;\\n\\n    @Autowired\\n    public EventRepositoryHttp(@Value(\\\"${publisher.uri}\\\") String uri, RestTemplate restTemplate) {\\n        this.uri = uri;\\n        this.restTemplate = restTemplate;\\n    }\\n\\n    @Override\\n    public void publish(Event event) {\\n        restTemplate.postForEntity(uri, event, String.class);\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"15\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"15\"\n  }), \"@Repository\\npublic class EventRepositoryHttp implements EventRepository {\\n\\n    private String uri;\\n    private final RestTemplate restTemplate;\\n\\n    @Autowired\\n    public EventRepositoryHttp(@Value(\\\"${publisher.uri}\\\") String uri, RestTemplate restTemplate) {\\n        this.uri = uri;\\n        this.restTemplate = restTemplate;\\n    }\\n\\n    @Override\\n    public void publish(Event event) {\\n        restTemplate.postForEntity(uri, event, String.class);\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"@Service\\npublic class EventService {\\n\\n    private final UUIDGenerator uuidGenerator;\\n    private final EventRepository repository;\\n\\n    @Autowired\\n    public EventService(UUIDGenerator uuidGenerator, EventRepository repository) {\\n        this.uuidGenerator = uuidGenerator;\\n        this.repository = repository;\\n    }\\n\\n    public void publish(Event event) {\\n        repository.publish(event.withId(uuidGenerator.generate()));\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"4:5\",\n    \"4:5\": true\n  }), \"@Service\\npublic class EventService {\\n\\n    private final UUIDGenerator uuidGenerator;\\n    private final EventRepository repository;\\n\\n    @Autowired\\n    public EventService(UUIDGenerator uuidGenerator, EventRepository repository) {\\n        this.uuidGenerator = uuidGenerator;\\n        this.repository = repository;\\n    }\\n\\n    public void publish(Event event) {\\n        repository.publish(event.withId(uuidGenerator.generate()));\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"13\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"13\"\n  }), \"@Service\\npublic class EventService {\\n\\n    private final UUIDGenerator uuidGenerator;\\n    private final EventRepository repository;\\n\\n    @Autowired\\n    public EventService(UUIDGenerator uuidGenerator, EventRepository repository) {\\n        this.uuidGenerator = uuidGenerator;\\n        this.repository = repository;\\n    }\\n\\n    public void publish(Event event) {\\n        repository.publish(event.withId(uuidGenerator.generate()));\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"14\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"14\"\n  }), \"@Service\\npublic class EventService {\\n\\n    private final UUIDGenerator uuidGenerator;\\n    private final EventRepository repository;\\n\\n    @Autowired\\n    public EventService(UUIDGenerator uuidGenerator, EventRepository repository) {\\n        this.uuidGenerator = uuidGenerator;\\n        this.repository = repository;\\n    }\\n\\n    public void publish(Event event) {\\n        repository.publish(event.withId(uuidGenerator.generate()));\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"2\"\n  }), \"@Service\\npublic class UserService implements Loggable {\\n\\n    private final UserRepository userRepository;\\n    private final UserTelemetry userTelemetry;\\n    private final EventService eventService;\\n\\n    @Autowired\\n    public UserService(UserRepository userRepository, UserTelemetry userTelemetry, EventService eventService) {\\n        this.userRepository = userRepository;\\n        this.userTelemetry = userTelemetry;\\n        this.eventService = eventService;\\n    }\\n\\n    public Optional<UserEntity> getById(Long id) {\\n        return userRepository.findById(id);\\n    }\\n\\n    public UserEntity save(UserEntity user) {\\n        validate(user);\\n        UserEntity savedUser = userRepository.save(user);\\n        saveEvent(UserRegisteredEvent.from(savedUser));\\n        return savedUser;\\n    }\\n\\n    private void saveEvent(Event event) {\\n        try {\\n            eventService.publish(event);\\n        } catch (Exception e) {\\n            userTelemetry.errorToSaveEvent(event, e);\\n        }\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"22\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"22\"\n  }), \"@Service\\npublic class UserService implements Loggable {\\n\\n    private final UserRepository userRepository;\\n    private final UserTelemetry userTelemetry;\\n    private final EventService eventService;\\n\\n    @Autowired\\n    public UserService(UserRepository userRepository, UserTelemetry userTelemetry, EventService eventService) {\\n        this.userRepository = userRepository;\\n        this.userTelemetry = userTelemetry;\\n        this.eventService = eventService;\\n    }\\n\\n    public Optional<UserEntity> getById(Long id) {\\n        return userRepository.findById(id);\\n    }\\n\\n    public UserEntity save(UserEntity user) {\\n        validate(user);\\n        UserEntity savedUser = userRepository.save(user);\\n        saveEvent(UserRegisteredEvent.from(savedUser));\\n        return savedUser;\\n    }\\n\\n    private void saveEvent(Event event) {\\n        try {\\n            eventService.publish(event);\\n        } catch (Exception e) {\\n            userTelemetry.errorToSaveEvent(event, e);\\n        }\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"28\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"28\"\n  }), \"@Service\\npublic class UserService implements Loggable {\\n\\n    private final UserRepository userRepository;\\n    private final UserTelemetry userTelemetry;\\n    private final EventService eventService;\\n\\n    @Autowired\\n    public UserService(UserRepository userRepository, UserTelemetry userTelemetry, EventService eventService) {\\n        this.userRepository = userRepository;\\n        this.userTelemetry = userTelemetry;\\n        this.eventService = eventService;\\n    }\\n\\n    public Optional<UserEntity> getById(Long id) {\\n        return userRepository.findById(id);\\n    }\\n\\n    public UserEntity save(UserEntity user) {\\n        validate(user);\\n        UserEntity savedUser = userRepository.save(user);\\n        saveEvent(UserRegisteredEvent.from(savedUser));\\n        return savedUser;\\n    }\\n\\n    private void saveEvent(Event event) {\\n        try {\\n            eventService.publish(event);\\n        } catch (Exception e) {\\n            userTelemetry.errorToSaveEvent(event, e);\\n        }\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"29:30\",\n    \"29:30\": true\n  }), \"@Service\\npublic class UserService implements Loggable {\\n\\n    private final UserRepository userRepository;\\n    private final UserTelemetry userTelemetry;\\n    private final EventService eventService;\\n\\n    @Autowired\\n    public UserService(UserRepository userRepository, UserTelemetry userTelemetry, EventService eventService) {\\n        this.userRepository = userRepository;\\n        this.userTelemetry = userTelemetry;\\n        this.eventService = eventService;\\n    }\\n\\n    public Optional<UserEntity> getById(Long id) {\\n        return userRepository.findById(id);\\n    }\\n\\n    public UserEntity save(UserEntity user) {\\n        validate(user);\\n        UserEntity savedUser = userRepository.save(user);\\n        saveEvent(UserRegisteredEvent.from(savedUser));\\n        return savedUser;\\n    }\\n\\n    private void saveEvent(Event event) {\\n        try {\\n            eventService.publish(event);\\n        } catch (Exception e) {\\n            userTelemetry.errorToSaveEvent(event, e);\\n        }\\n    }\\n\"))), mdx(\"hr\", null), mdx(L.Column, null, mdx(\"h2\", null, \"E agora, como testar isso?\"), mdx(\"img\", {\n    style: {\n      height: \"75%\"\n    },\n    src: BusinessManThinking\n  })), mdx(\"hr\", null), mdx(L.Column, {\n    sx: {\n      width: \"120%\"\n    }\n  }, mdx(\"h2\", null, \"Uma possibilidade \\xE9 utilizar:\"), mdx(\"h1\", null, \"Mocks\")), mdx(\"hr\", null), mdx(L.Column, {\n    sx: {\n      width: \"120%\"\n    }\n  }, mdx(\"h2\", null, \"Mas o que \\xE9 mock?\"), mdx(\"img\", {\n    style: {\n      height: \"75%\",\n      alignSelf: \"center\"\n    },\n    src: Pretender\n  })), mdx(\"hr\", null), mdx(\"img\", {\n    style: {\n      height: \"75%\",\n      alignSelf: \"center\"\n    },\n    src: Mockito\n  }), mdx(\"hr\", null), mdx(L.Column, null, mdx(\"h2\", null, \"Mas porque o mockito?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ferramenta amplamente utilizada pela comunidade Java\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Altamente integrado com o Spring\"))), mdx(\"hr\", null), mdx(Surfer, {\n    mdxType: \"Surfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"title=\\\"Exemplo de uso\\\"\",\n    \"title\": \"\\\"Exemplo\",\n    \"de\": true,\n    \"uso\\\"\": true\n  }), \"LinkedList mockedList = mock(LinkedList.class);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"title=\\\"Mockando uma Linked List\\\"\",\n    \"title\": \"\\\"Mockando\",\n    \"uma\": true,\n    \"Linked\": true,\n    \"List\\\"\": true\n  }), \"LinkedList mockedList = mock(LinkedList.class);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"2[1:24]\",\n    \"2[1:24]\": true\n  }), \"LinkedList mockedList = mock(LinkedList.class);\\nwhen(mockedList.get(0)).thenReturn(\\\"first\\\");\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"2[25:45]\",\n    \"2[25:45]\": true\n  }), \"LinkedList mockedList = mock(LinkedList.class);\\nwhen(mockedList.get(0)).thenReturn(\\\"first\\\");\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"3\"\n  }), \"LinkedList mockedList = mock(LinkedList.class);\\nwhen(mockedList.get(0)).thenReturn(\\\"first\\\");\\nSystem.out.println(mockedList.get(0)); // imprime \\\"first\\\"\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"4\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"4\"\n  }), \"LinkedList mockedList = mock(LinkedList.class);\\nwhen(mockedList.get(0)).thenReturn(\\\"first\\\");\\nSystem.out.println(mockedList.get(0)); // imprime \\\"first\\\"\\nSystem.out.println(mockedList.get(999)); // imprime \\\"null\\\"\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Deve ser garantido atrav\\xE9s dos mocks que:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"O evento foi \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"enviado corretamente\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"O evento \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"n\\xE3o foi enviado\"), \" nos fluxos de erro\")), mdx(\"hr\", null), mdx(Surfer, {\n    mdxType: \"Surfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"title=\\\"É necessário mockar dois componentes do código\\\"\",\n    \"title\": \"\\\"É\",\n    \"necessário\": true,\n    \"mockar\": true,\n    \"dois\": true,\n    \"componentes\": true,\n    \"do\": true,\n    \"código\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"4\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"4\"\n  }), \"@Service\\npublic class EventService {\\n\\n    private final UUIDGenerator uuidGenerator;\\n    private final EventRepository repository;\\n\\n    @Autowired\\n    public EventService(UUIDGenerator uuidGenerator, EventRepository repository) {\\n        this.uuidGenerator = uuidGenerator;\\n        this.repository = repository;\\n    }\\n\\n    public void publish(Event event) {\\n        repository.publish(event.withId(uuidGenerator.generate()));\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"5\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"5\"\n  }), \"@Repository\\npublic class EventRepositoryHttp implements EventRepository {\\n\\n    private String uri;\\n    private final RestTemplate restTemplate;\\n\\n    @Autowired\\n    public EventRepositoryHttp(@Value(\\\"${publisher.uri}\\\") String uri, RestTemplate restTemplate) {\\n        this.uri = uri;\\n        this.restTemplate = restTemplate;\\n    }\\n\\n    @Override\\n    public void publish(Event event) {\\n        restTemplate.postForEntity(uri, event, String.class);\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"1 title=\\\"Vamos criar os testes agora\\\"\",\n    \"title\": \"\\\"Vamos\",\n    \"criar\": true,\n    \"os\": true,\n    \"testes\": true,\n    \"agora\\\"\": true\n  }), \"class UserIT extends AbstractIT {\\n\\n    private static String PUBLISHER_URI = \\\"http://mock.publisher/publish\\\";\\n    private static UUID DEFAULT_UUID = UUID.randomUUID();\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\n    void allFieldsFilledProperly() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        assertSaveUserSuccessfully(userToSave);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with just required fields filled successfully\\\")\\n    void requiredFieldsFilled() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.name().fullName())\\n            .setBirthDate(LocalDate.now());\\n        assertSaveUserSuccessfully(userToSave);\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"11:12\",\n    \"11:12\": true\n  }), \"class UserIT extends AbstractIT {\\n\\n    private static String PUBLISHER_URI = \\\"http://mock.publisher/publish\\\";\\n    private static UUID DEFAULT_UUID = UUID.randomUUID();\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @MockBean\\n    private RestTemplate restTemplate;\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\n    void allFieldsFilledProperly() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        assertSaveUserSuccessfully(userToSave);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with just required fields filled successfully\\\")\\n    void requiredFieldsFilled() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.name().fullName())\\n            .setBirthDate(LocalDate.now());\\n        assertSaveUserSuccessfully(userToSave);\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"14:15\",\n    \"14:15\": true\n  }), \"class UserIT extends AbstractIT {\\n\\n    private static String PUBLISHER_URI = \\\"http://mock.publisher/publish\\\";\\n    private static UUID DEFAULT_UUID = UUID.randomUUID();\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @MockBean\\n    private RestTemplate restTemplate;\\n\\n    @MockBean\\n    private UUIDGenerator uuidGenerator;\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\n    void allFieldsFilledProperly() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        assertSaveUserSuccessfully(userToSave);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with just required fields filled successfully\\\")\\n    void requiredFieldsFilled() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.name().fullName())\\n            .setBirthDate(LocalDate.now());\\n        assertSaveUserSuccessfully(userToSave);\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"11,14 title=\\\"O que é esse MockBean?\\\"\",\n    \"11,14\": true,\n    \"title\": \"\\\"O\",\n    \"que\": true,\n    \"é\": true,\n    \"esse\": true,\n    \"MockBean?\\\"\": true\n  }), \"class UserIT extends AbstractIT {\\n\\n    private static String PUBLISHER_URI = \\\"http://mock.publisher/publish\\\";\\n    private static UUID DEFAULT_UUID = UUID.randomUUID();\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @MockBean\\n    private RestTemplate restTemplate;\\n\\n    @MockBean\\n    private UUIDGenerator uuidGenerator;\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\n    void allFieldsFilledProperly() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        assertSaveUserSuccessfully(userToSave);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with just required fields filled successfully\\\")\\n    void requiredFieldsFilled() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.name().fullName())\\n            .setBirthDate(LocalDate.now());\\n        assertSaveUserSuccessfully(userToSave);\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"11,14 title=\\\"Agora vamos garantir que o evento está sendo enviado corretamente\\\"\",\n    \"11,14\": true,\n    \"title\": \"\\\"Agora\",\n    \"vamos\": true,\n    \"garantir\": true,\n    \"que\": true,\n    \"o\": true,\n    \"evento\": true,\n    \"está\": true,\n    \"sendo\": true,\n    \"enviado\": true,\n    \"corretamente\\\"\": true\n  }), \"class UserIT extends AbstractIT {\\n\\n    private static String PUBLISHER_URI = \\\"http://mock.publisher/publish\\\";\\n    private static UUID DEFAULT_UUID = UUID.randomUUID();\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @MockBean\\n    private RestTemplate restTemplate;\\n\\n    @MockBean\\n    private UUIDGenerator uuidGenerator;\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\n    void allFieldsFilledProperly() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        assertSaveUserSuccessfully(userToSave);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with just required fields filled successfully\\\")\\n    void requiredFieldsFilled() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.name().fullName())\\n            .setBirthDate(LocalDate.now());\\n        assertSaveUserSuccessfully(userToSave);\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"17\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"17\"\n  }), \"class UserIT extends AbstractIT {\\n\\n    private static String PUBLISHER_URI = \\\"http://mock.publisher/publish\\\";\\n    private static UUID DEFAULT_UUID = UUID.randomUUID();\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @MockBean\\n    private RestTemplate restTemplate;\\n\\n    @MockBean\\n    private UUIDGenerator uuidGenerator;\\n\\n    @BeforeEach\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\n    void allFieldsFilledProperly() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        assertSaveUserSuccessfully(userToSave);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with just required fields filled successfully\\\")\\n    void requiredFieldsFilled() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.name().fullName())\\n            .setBirthDate(LocalDate.now());\\n        assertSaveUserSuccessfully(userToSave);\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"18:19\",\n    \"18:19\": true\n  }), \"class UserIT extends AbstractIT {\\n\\n    private static String PUBLISHER_URI = \\\"http://mock.publisher/publish\\\";\\n    private static UUID DEFAULT_UUID = UUID.randomUUID();\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @MockBean\\n    private RestTemplate restTemplate;\\n\\n    @MockBean\\n    private UUIDGenerator uuidGenerator;\\n\\n    @BeforeEach\\n    void setUp() {\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\n    void allFieldsFilledProperly() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        assertSaveUserSuccessfully(userToSave);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with just required fields filled successfully\\\")\\n    void requiredFieldsFilled() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.name().fullName())\\n            .setBirthDate(LocalDate.now());\\n        assertSaveUserSuccessfully(userToSave);\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"19[9:39]\",\n    \"19[9:39]\": true\n  }), \"class UserIT extends AbstractIT {\\n\\n    private static String PUBLISHER_URI = \\\"http://mock.publisher/publish\\\";\\n    private static UUID DEFAULT_UUID = UUID.randomUUID();\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @MockBean\\n    private RestTemplate restTemplate;\\n\\n    @MockBean\\n    private UUIDGenerator uuidGenerator;\\n\\n    @BeforeEach\\n    void setUp() {\\n        when(uuidGenerator.generate()).thenReturn(DEFAULT_UUID);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\n    void allFieldsFilledProperly() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        assertSaveUserSuccessfully(userToSave);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with just required fields filled successfully\\\")\\n    void requiredFieldsFilled() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.name().fullName())\\n            .setBirthDate(LocalDate.now());\\n        assertSaveUserSuccessfully(userToSave);\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"19[40:65]\",\n    \"19[40:65]\": true\n  }), \"class UserIT extends AbstractIT {\\n\\n    private static String PUBLISHER_URI = \\\"http://mock.publisher/publish\\\";\\n    private static UUID DEFAULT_UUID = UUID.randomUUID();\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @MockBean\\n    private RestTemplate restTemplate;\\n\\n    @MockBean\\n    private UUIDGenerator uuidGenerator;\\n\\n    @BeforeEach\\n    void setUp() {\\n        when(uuidGenerator.generate()).thenReturn(DEFAULT_UUID);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\n    void allFieldsFilledProperly() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        assertSaveUserSuccessfully(userToSave);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with just required fields filled successfully\\\")\\n    void requiredFieldsFilled() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.name().fullName())\\n            .setBirthDate(LocalDate.now());\\n        assertSaveUserSuccessfully(userToSave);\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"17:20 title=\\\"Garantimos que o UUID gerado sempre será o mesmo!\\\"\",\n    \"17:20\": true,\n    \"title\": \"\\\"Garantimos\",\n    \"que\": true,\n    \"o\": true,\n    \"UUID\": true,\n    \"gerado\": true,\n    \"sempre\": true,\n    \"será\": true,\n    \"mesmo!\\\"\": true\n  }), \"class UserIT extends AbstractIT {\\n\\n    private static String PUBLISHER_URI = \\\"http://mock.publisher/publish\\\";\\n    private static UUID DEFAULT_UUID = UUID.randomUUID();\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @MockBean\\n    private RestTemplate restTemplate;\\n\\n    @MockBean\\n    private UUIDGenerator uuidGenerator;\\n\\n    @BeforeEach\\n    void setUp() {\\n        when(uuidGenerator.generate()).thenReturn(DEFAULT_UUID);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\n    void allFieldsFilledProperly() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        assertSaveUserSuccessfully(userToSave);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with just required fields filled successfully\\\")\\n    void requiredFieldsFilled() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.name().fullName())\\n            .setBirthDate(LocalDate.now());\\n        assertSaveUserSuccessfully(userToSave);\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"31\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"31\"\n  }), \"class UserIT extends AbstractIT {\\n\\n    private static String PUBLISHER_URI = \\\"http://mock.publisher/publish\\\";\\n    private static UUID DEFAULT_UUID = UUID.randomUUID();\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @MockBean\\n    private RestTemplate restTemplate;\\n\\n    @MockBean\\n    private UUIDGenerator uuidGenerator;\\n\\n    @BeforeEach\\n    void setUp() {\\n        when(uuidGenerator.generate()).thenReturn(DEFAULT_UUID);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\n    void allFieldsFilledProperly() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        assertSaveUserSuccessfully(userToSave);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with just required fields filled successfully\\\")\\n    void requiredFieldsFilled() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.name().fullName())\\n            .setBirthDate(LocalDate.now());\\n        assertSaveUserSuccessfully(userToSave);\\n    }\\n\\n    private UserDTO assertSaveUserSuccessfully(CreateUserDTO userToSave) {\\n        ResponseEntity<Void> resp = userApiClient.save(userToSave);\\n        assertThat(resp.getStatusCode()).isEqualTo(CREATED);\\n        UserDTO savedUser = UserDTO.fromDTO(userToSave, getUserId(resp));\\n        return assertGetByID(savedUser);\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"41\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"41\"\n  }), \"class UserIT extends AbstractIT {\\n\\n    private static String PUBLISHER_URI = \\\"http://mock.publisher/publish\\\";\\n    private static UUID DEFAULT_UUID = UUID.randomUUID();\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @MockBean\\n    private RestTemplate restTemplate;\\n\\n    @MockBean\\n    private UUIDGenerator uuidGenerator;\\n\\n    @BeforeEach\\n    void setUp() {\\n        when(uuidGenerator.generate()).thenReturn(DEFAULT_UUID);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\n    void allFieldsFilledProperly() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        assertSaveUserSuccessfully(userToSave);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with just required fields filled successfully\\\")\\n    void requiredFieldsFilled() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.name().fullName())\\n            .setBirthDate(LocalDate.now());\\n        assertSaveUserSuccessfully(userToSave);\\n    }\\n\\n    private UserDTO assertSaveUserSuccessfully(CreateUserDTO userToSave) {\\n        ResponseEntity<Void> resp = userApiClient.save(userToSave);\\n        assertThat(resp.getStatusCode()).isEqualTo(CREATED);\\n        UserDTO savedUser = UserDTO.fromDTO(userToSave, getUserId(resp));\\n        return assertGetByID(savedUser);\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"44:49\",\n    \"44:49\": true\n  }), \"class UserIT extends AbstractIT {\\n\\n    private static String PUBLISHER_URI = \\\"http://mock.publisher/publish\\\";\\n    private static UUID DEFAULT_UUID = UUID.randomUUID();\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @MockBean\\n    private RestTemplate restTemplate;\\n\\n    @MockBean\\n    private UUIDGenerator uuidGenerator;\\n\\n    @BeforeEach\\n    void setUp() {\\n        when(uuidGenerator.generate()).thenReturn(DEFAULT_UUID);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\n    void allFieldsFilledProperly() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        assertSaveUserSuccessfully(userToSave);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with just required fields filled successfully\\\")\\n    void requiredFieldsFilled() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.name().fullName())\\n            .setBirthDate(LocalDate.now());\\n        assertSaveUserSuccessfully(userToSave);\\n    }\\n\\n    private UserDTO assertSaveUserSuccessfully(CreateUserDTO userToSave) {\\n        ResponseEntity<Void> resp = userApiClient.save(userToSave);\\n        assertThat(resp.getStatusCode()).isEqualTo(CREATED);\\n        UserDTO savedUser = UserDTO.fromDTO(userToSave, getUserId(resp));\\n        return assertGetByID(savedUser);\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"48\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"48\"\n  }), \"class UserIT extends AbstractIT {\\n\\n    private static String PUBLISHER_URI = \\\"http://mock.publisher/publish\\\";\\n    private static UUID DEFAULT_UUID = UUID.randomUUID();\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @MockBean\\n    private RestTemplate restTemplate;\\n\\n    @MockBean\\n    private UUIDGenerator uuidGenerator;\\n\\n    @BeforeEach\\n    void setUp() {\\n        when(uuidGenerator.generate()).thenReturn(DEFAULT_UUID);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\n    void allFieldsFilledProperly() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        assertSaveUserSuccessfully(userToSave);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with just required fields filled successfully\\\")\\n    void requiredFieldsFilled() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.name().fullName())\\n            .setBirthDate(LocalDate.now());\\n        assertSaveUserSuccessfully(userToSave);\\n    }\\n\\n    private UserDTO assertSaveUserSuccessfully(CreateUserDTO userToSave) {\\n        ResponseEntity<Void> resp = userApiClient.save(userToSave);\\n        assertThat(resp.getStatusCode()).isEqualTo(CREATED);\\n        UserDTO savedUser = UserDTO.fromDTO(userToSave, getUserId(resp));\\n        UserRegisteredEvent expectedEvent = toEvent(savedUser);\\n        return assertGetByID(savedUser);\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"52:60\",\n    \"52:60\": true\n  }), \"class UserIT extends AbstractIT {\\n\\n    private static String PUBLISHER_URI = \\\"http://mock.publisher/publish\\\";\\n    private static UUID DEFAULT_UUID = UUID.randomUUID();\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @MockBean\\n    private RestTemplate restTemplate;\\n\\n    @MockBean\\n    private UUIDGenerator uuidGenerator;\\n\\n    @BeforeEach\\n    void setUp() {\\n        when(uuidGenerator.generate()).thenReturn(DEFAULT_UUID);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\n    void allFieldsFilledProperly() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        assertSaveUserSuccessfully(userToSave);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with just required fields filled successfully\\\")\\n    void requiredFieldsFilled() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.name().fullName())\\n            .setBirthDate(LocalDate.now());\\n        assertSaveUserSuccessfully(userToSave);\\n    }\\n\\n    private UserDTO assertSaveUserSuccessfully(CreateUserDTO userToSave) {\\n        ResponseEntity<Void> resp = userApiClient.save(userToSave);\\n        assertThat(resp.getStatusCode()).isEqualTo(CREATED);\\n        UserDTO savedUser = UserDTO.fromDTO(userToSave, getUserId(resp));\\n        UserRegisteredEvent expectedEvent = toEvent(savedUser);\\n        return assertGetByID(savedUser);\\n    }\\n\\n    private UserRegisteredEvent toEvent(UserDTO savedUser) {\\n        return UserRegisteredEvent\\n            .builder()\\n            .id(DEFAULT_UUID)\\n            .cpf(savedUser.getCpf())\\n            .email(savedUser.getEmail())\\n            .name(savedUser.getName())\\n            .build();\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"55\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"55 title=\\\"Usamos o DEFAULT_ID que foi mockado!\\\"\",\n    \"title\": \"\\\"Usamos\",\n    \"o\": true,\n    \"DEFAULT_ID\": true,\n    \"que\": true,\n    \"foi\": true,\n    \"mockado!\\\"\": true\n  }), \"class UserIT extends AbstractIT {\\n\\n    private static String PUBLISHER_URI = \\\"http://mock.publisher/publish\\\";\\n    private static UUID DEFAULT_UUID = UUID.randomUUID();\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @MockBean\\n    private RestTemplate restTemplate;\\n\\n    @MockBean\\n    private UUIDGenerator uuidGenerator;\\n\\n    @BeforeEach\\n    void setUp() {\\n        when(uuidGenerator.generate()).thenReturn(DEFAULT_UUID);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\n    void allFieldsFilledProperly() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        assertSaveUserSuccessfully(userToSave);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with just required fields filled successfully\\\")\\n    void requiredFieldsFilled() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.name().fullName())\\n            .setBirthDate(LocalDate.now());\\n        assertSaveUserSuccessfully(userToSave);\\n    }\\n\\n    private UserDTO assertSaveUserSuccessfully(CreateUserDTO userToSave) {\\n        ResponseEntity<Void> resp = userApiClient.save(userToSave);\\n        assertThat(resp.getStatusCode()).isEqualTo(CREATED);\\n        UserDTO savedUser = UserDTO.fromDTO(userToSave, getUserId(resp));\\n        UserRegisteredEvent expectedEvent = toEvent(savedUser);\\n        return assertGetByID(savedUser);\\n    }\\n\\n    private UserRegisteredEvent toEvent(UserDTO savedUser) {\\n        return UserRegisteredEvent\\n            .builder()\\n            .id(DEFAULT_UUID)\\n            .cpf(savedUser.getCpf())\\n            .email(savedUser.getEmail())\\n            .name(savedUser.getName())\\n            .build();\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"49\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"49 title=\\\"Agora checamos o mock\\\"\",\n    \"title\": \"\\\"Agora\",\n    \"checamos\": true,\n    \"o\": true,\n    \"mock\\\"\": true\n  }), \"class UserIT extends AbstractIT {\\n\\n    private static String PUBLISHER_URI = \\\"http://mock.publisher/publish\\\";\\n    private static UUID DEFAULT_UUID = UUID.randomUUID();\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @MockBean\\n    private RestTemplate restTemplate;\\n\\n    @MockBean\\n    private UUIDGenerator uuidGenerator;\\n\\n    @BeforeEach\\n    void setUp() {\\n        when(uuidGenerator.generate()).thenReturn(DEFAULT_UUID);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\n    void allFieldsFilledProperly() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        assertSaveUserSuccessfully(userToSave);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with just required fields filled successfully\\\")\\n    void requiredFieldsFilled() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.name().fullName())\\n            .setBirthDate(LocalDate.now());\\n        assertSaveUserSuccessfully(userToSave);\\n    }\\n\\n    private UserDTO assertSaveUserSuccessfully(CreateUserDTO userToSave) {\\n        ResponseEntity<Void> resp = userApiClient.save(userToSave);\\n        assertThat(resp.getStatusCode()).isEqualTo(CREATED);\\n        UserDTO savedUser = UserDTO.fromDTO(userToSave, getUserId(resp));\\n        UserRegisteredEvent expectedEvent = toEvent(savedUser);\\n        verify(restTemplate).postForEntity(PUBLISHER_URI, expectedEvent, String.class);\\n        return assertGetByID(savedUser);\\n    }\\n\\n    private UserRegisteredEvent toEvent(UserDTO savedUser) {\\n        return UserRegisteredEvent\\n            .builder()\\n            .id(DEFAULT_UUID)\\n            .cpf(savedUser.getCpf())\\n            .email(savedUser.getEmail())\\n            .name(savedUser.getName())\\n            .build();\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"49[9:29]\",\n    \"49[9:29]\": true\n  }), \"class UserIT extends AbstractIT {\\n\\n    private static String PUBLISHER_URI = \\\"http://mock.publisher/publish\\\";\\n    private static UUID DEFAULT_UUID = UUID.randomUUID();\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @MockBean\\n    private RestTemplate restTemplate;\\n\\n    @MockBean\\n    private UUIDGenerator uuidGenerator;\\n\\n    @BeforeEach\\n    void setUp() {\\n        when(uuidGenerator.generate()).thenReturn(DEFAULT_UUID);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\n    void allFieldsFilledProperly() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        assertSaveUserSuccessfully(userToSave);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with just required fields filled successfully\\\")\\n    void requiredFieldsFilled() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.name().fullName())\\n            .setBirthDate(LocalDate.now());\\n        assertSaveUserSuccessfully(userToSave);\\n    }\\n\\n    private UserDTO assertSaveUserSuccessfully(CreateUserDTO userToSave) {\\n        ResponseEntity<Void> resp = userApiClient.save(userToSave);\\n        assertThat(resp.getStatusCode()).isEqualTo(CREATED);\\n        UserDTO savedUser = UserDTO.fromDTO(userToSave, getUserId(resp));\\n        UserRegisteredEvent expectedEvent = toEvent(savedUser);\\n        verify(restTemplate).postForEntity(PUBLISHER_URI, expectedEvent, String.class);\\n        return assertGetByID(savedUser);\\n    }\\n\\n    private UserRegisteredEvent toEvent(UserDTO savedUser) {\\n        return UserRegisteredEvent\\n            .builder()\\n            .id(DEFAULT_UUID)\\n            .cpf(savedUser.getCpf())\\n            .email(savedUser.getEmail())\\n            .name(savedUser.getName())\\n            .build();\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"49[30:88]\",\n    \"49[30:88]\": true\n  }), \"class UserIT extends AbstractIT {\\n\\n    private static String PUBLISHER_URI = \\\"http://mock.publisher/publish\\\";\\n    private static UUID DEFAULT_UUID = UUID.randomUUID();\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @MockBean\\n    private RestTemplate restTemplate;\\n\\n    @MockBean\\n    private UUIDGenerator uuidGenerator;\\n\\n    @BeforeEach\\n    void setUp() {\\n        when(uuidGenerator.generate()).thenReturn(DEFAULT_UUID);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\n    void allFieldsFilledProperly() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        assertSaveUserSuccessfully(userToSave);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with just required fields filled successfully\\\")\\n    void requiredFieldsFilled() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.name().fullName())\\n            .setBirthDate(LocalDate.now());\\n        assertSaveUserSuccessfully(userToSave);\\n    }\\n\\n    private UserDTO assertSaveUserSuccessfully(CreateUserDTO userToSave) {\\n        ResponseEntity<Void> resp = userApiClient.save(userToSave);\\n        assertThat(resp.getStatusCode()).isEqualTo(CREATED);\\n        UserDTO savedUser = UserDTO.fromDTO(userToSave, getUserId(resp));\\n        UserRegisteredEvent expectedEvent = toEvent(savedUser);\\n        verify(restTemplate).postForEntity(PUBLISHER_URI, expectedEvent, String.class);\\n        return assertGetByID(savedUser);\\n    }\\n\\n    private UserRegisteredEvent toEvent(UserDTO savedUser) {\\n        return UserRegisteredEvent\\n            .builder()\\n            .id(DEFAULT_UUID)\\n            .cpf(savedUser.getCpf())\\n            .email(savedUser.getEmail())\\n            .name(savedUser.getName())\\n            .build();\\n    }\\n\"))), mdx(\"hr\", null), mdx(Background, {\n    mdxType: \"Background\"\n  }), mdx(L.Row, null, mdx(Done, {\n    style: {\n      height: \"200px\"\n    },\n    mdxType: \"Done\"\n  }), mdx(\"h3\", {\n    style: {\n      color: \"gray\"\n    }\n  }, \"Testado o envio correto dos eventos!\")), mdx(\"hr\", null), mdx(Surfer, {\n    mdxType: \"Surfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"1 title=\\\"Agora queremos garantir que os eventos não sejam enviados nos fluxos de erro!\\\"\",\n    \"title\": \"\\\"Agora\",\n    \"queremos\": true,\n    \"garantir\": true,\n    \"que\": true,\n    \"os\": true,\n    \"eventos\": true,\n    \"não\": true,\n    \"sejam\": true,\n    \"enviados\": true,\n    \"nos\": true,\n    \"fluxos\": true,\n    \"de\": true,\n    \"erro!\\\"\": true\n  }), \"class UserIT extends AbstractIT {\\n\\n    private static String PUBLISHER_URI = \\\"http://mock.publisher/publish\\\";\\n    private static UUID DEFAULT_UUID = UUID.randomUUID();\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @MockBean\\n    private RestTemplate restTemplate;\\n\\n    @MockBean\\n    private UUIDGenerator uuidGenerator;\\n\\n    @BeforeEach\\n    void setUp() {\\n        when(uuidGenerator.generate()).thenReturn(DEFAULT_UUID);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\n    void allFieldsFilledProperly() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        assertSaveUserSuccessfully(userToSave);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Save and get user with just required fields filled successfully\\\")\\n    void requiredFieldsFilled() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.name().fullName())\\n            .setBirthDate(LocalDate.now());\\n        assertSaveUserSuccessfully(userToSave);\\n    }\\n\\n    private UserDTO assertSaveUserSuccessfully(CreateUserDTO userToSave) {\\n        ResponseEntity<Void> resp = userApiClient.save(userToSave);\\n        assertThat(resp.getStatusCode()).isEqualTo(CREATED);\\n        UserDTO savedUser = UserDTO.fromDTO(userToSave, getUserId(resp));\\n        UserRegisteredEvent expectedEvent = toEvent(savedUser);\\n        verify(restTemplate).postForEntity(PUBLISHER_URI, expectedEvent, String.class);\\n        return assertGetByID(savedUser);\\n    }\\n\\n    private UserRegisteredEvent toEvent(UserDTO savedUser) {\\n        return UserRegisteredEvent\\n            .builder()\\n            .id(DEFAULT_UUID)\\n            .cpf(savedUser.getCpf())\\n            .email(savedUser.getEmail())\\n            .name(savedUser.getName())\\n            .build();\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"32\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"32\"\n  }), \"class UserIT extends AbstractIT {\\n\\n    private static String PUBLISHER_URI = \\\"http://mock.publisher/publish\\\";\\n    private static UUID DEFAULT_UUID = UUID.randomUUID();\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @MockBean\\n    private RestTemplate restTemplate;\\n\\n    @MockBean\\n    private UUIDGenerator uuidGenerator;\\n\\n    @BeforeEach\\n    void setUp() {\\n        when(uuidGenerator.generate()).thenReturn(DEFAULT_UUID);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Error to save user without any field filled\\\")\\n    void noFieldFilled() {\\n        CreateUserDTO userToSave = new CreateUserDTO();\\n        ErrorDTO expectedError = new ErrorDTO()\\n            .setCode(ValidationException.CODE_ERROR)\\n            .addError(\\\"name\\\", \\\"must not be blank\\\")\\n            .addError(\\\"cpf\\\", \\\"must not be null\\\")\\n            .addError(\\\"birthDate\\\", \\\"must not be null\\\");\\n        ResponseEntity<ErrorDTO> resp = userApiClient.save(userToSave, ErrorDTO.class);\\n        assertValidationError(userToSave, expectedError);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Error to save user with invalid e-mail, address, name, cpf and birth date\\\")\\n    void invalidEmailAddressNameCpfAndBirthDate() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setEmail(\\\"Goku > Naruto\\\")\\n            .setAddress(\\\"_\\\")\\n            .setCpf(\\\"bolacha ou biscoito?\\\")\\n            .setName(\\\"_\\\")\\n            .setBirthDate(LocalDate.now().plusDays(1));\\n        ErrorDTO expectedError = new ErrorDTO()\\n            .setCode(ValidationException.CODE_ERROR)\\n            .addError(\\\"address\\\", \\\"size must be between 5 and 254\\\")\\n            .addError(\\\"name\\\", \\\"size must be between 3 and 90\\\")\\n            .addError(\\\"cpf\\\", \\\"invalid Brazilian individual taxpayer registry number (CPF)\\\")\\n            .addError(\\\"email\\\", \\\"must be a well-formed email address\\\")\\n            .addError(\\\"birthDate\\\", \\\"must be a date in the past or in the present\\\");\\n        ResponseEntity<ErrorDTO> resp = userApiClient.save(userToSave, ErrorDTO.class);\\n        assertValidationError(userToSave, expectedError);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Error to save user with invalid e-mail and repeated cpf\\\")\\n    void invalidEmailAndRepeatedCpf() {\\n        CreateUserDTO validUser = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        assertSaveUserSuccessfully(validUser);\\n        CreateUserDTO invalidUser = validUser.withEmail(\\\"ronaldo\\\");\\n        ErrorDTO expectedError = new ErrorDTO()\\n            .setCode(ValidationException.CODE_ERROR)\\n            .addError(\\\"email\\\", \\\"must be a well-formed email address\\\")\\n            .addError(\\\"cpf\\\", \\\"value already registered\\\");\\n        assertValidationError(invalidUser, expectedError);\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"52\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"52\"\n  }), \"class UserIT extends AbstractIT {\\n\\n    private static String PUBLISHER_URI = \\\"http://mock.publisher/publish\\\";\\n    private static UUID DEFAULT_UUID = UUID.randomUUID();\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @MockBean\\n    private RestTemplate restTemplate;\\n\\n    @MockBean\\n    private UUIDGenerator uuidGenerator;\\n\\n    @BeforeEach\\n    void setUp() {\\n        when(uuidGenerator.generate()).thenReturn(DEFAULT_UUID);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Error to save user without any field filled\\\")\\n    void noFieldFilled() {\\n        CreateUserDTO userToSave = new CreateUserDTO();\\n        ErrorDTO expectedError = new ErrorDTO()\\n            .setCode(ValidationException.CODE_ERROR)\\n            .addError(\\\"name\\\", \\\"must not be blank\\\")\\n            .addError(\\\"cpf\\\", \\\"must not be null\\\")\\n            .addError(\\\"birthDate\\\", \\\"must not be null\\\");\\n        ResponseEntity<ErrorDTO> resp = userApiClient.save(userToSave, ErrorDTO.class);\\n        assertValidationError(userToSave, expectedError);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Error to save user with invalid e-mail, address, name, cpf and birth date\\\")\\n    void invalidEmailAddressNameCpfAndBirthDate() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setEmail(\\\"Goku > Naruto\\\")\\n            .setAddress(\\\"_\\\")\\n            .setCpf(\\\"bolacha ou biscoito?\\\")\\n            .setName(\\\"_\\\")\\n            .setBirthDate(LocalDate.now().plusDays(1));\\n        ErrorDTO expectedError = new ErrorDTO()\\n            .setCode(ValidationException.CODE_ERROR)\\n            .addError(\\\"address\\\", \\\"size must be between 5 and 254\\\")\\n            .addError(\\\"name\\\", \\\"size must be between 3 and 90\\\")\\n            .addError(\\\"cpf\\\", \\\"invalid Brazilian individual taxpayer registry number (CPF)\\\")\\n            .addError(\\\"email\\\", \\\"must be a well-formed email address\\\")\\n            .addError(\\\"birthDate\\\", \\\"must be a date in the past or in the present\\\");\\n        ResponseEntity<ErrorDTO> resp = userApiClient.save(userToSave, ErrorDTO.class);\\n        assertValidationError(userToSave, expectedError);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Error to save user with invalid e-mail and repeated cpf\\\")\\n    void invalidEmailAndRepeatedCpf() {\\n        CreateUserDTO validUser = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        assertSaveUserSuccessfully(validUser);\\n        CreateUserDTO invalidUser = validUser.withEmail(\\\"ronaldo\\\");\\n        ErrorDTO expectedError = new ErrorDTO()\\n            .setCode(ValidationException.CODE_ERROR)\\n            .addError(\\\"email\\\", \\\"must be a well-formed email address\\\")\\n            .addError(\\\"cpf\\\", \\\"value already registered\\\");\\n        assertValidationError(invalidUser, expectedError);\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"70\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"70\"\n  }), \"class UserIT extends AbstractIT {\\n\\n    private static String PUBLISHER_URI = \\\"http://mock.publisher/publish\\\";\\n    private static UUID DEFAULT_UUID = UUID.randomUUID();\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @MockBean\\n    private RestTemplate restTemplate;\\n\\n    @MockBean\\n    private UUIDGenerator uuidGenerator;\\n\\n    @BeforeEach\\n    void setUp() {\\n        when(uuidGenerator.generate()).thenReturn(DEFAULT_UUID);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Error to save user without any field filled\\\")\\n    void noFieldFilled() {\\n        CreateUserDTO userToSave = new CreateUserDTO();\\n        ErrorDTO expectedError = new ErrorDTO()\\n            .setCode(ValidationException.CODE_ERROR)\\n            .addError(\\\"name\\\", \\\"must not be blank\\\")\\n            .addError(\\\"cpf\\\", \\\"must not be null\\\")\\n            .addError(\\\"birthDate\\\", \\\"must not be null\\\");\\n        ResponseEntity<ErrorDTO> resp = userApiClient.save(userToSave, ErrorDTO.class);\\n        assertValidationError(userToSave, expectedError);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Error to save user with invalid e-mail, address, name, cpf and birth date\\\")\\n    void invalidEmailAddressNameCpfAndBirthDate() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setEmail(\\\"Goku > Naruto\\\")\\n            .setAddress(\\\"_\\\")\\n            .setCpf(\\\"bolacha ou biscoito?\\\")\\n            .setName(\\\"_\\\")\\n            .setBirthDate(LocalDate.now().plusDays(1));\\n        ErrorDTO expectedError = new ErrorDTO()\\n            .setCode(ValidationException.CODE_ERROR)\\n            .addError(\\\"address\\\", \\\"size must be between 5 and 254\\\")\\n            .addError(\\\"name\\\", \\\"size must be between 3 and 90\\\")\\n            .addError(\\\"cpf\\\", \\\"invalid Brazilian individual taxpayer registry number (CPF)\\\")\\n            .addError(\\\"email\\\", \\\"must be a well-formed email address\\\")\\n            .addError(\\\"birthDate\\\", \\\"must be a date in the past or in the present\\\");\\n        ResponseEntity<ErrorDTO> resp = userApiClient.save(userToSave, ErrorDTO.class);\\n        assertValidationError(userToSave, expectedError);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Error to save user with invalid e-mail and repeated cpf\\\")\\n    void invalidEmailAndRepeatedCpf() {\\n        CreateUserDTO validUser = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        assertSaveUserSuccessfully(validUser);\\n        CreateUserDTO invalidUser = validUser.withEmail(\\\"ronaldo\\\");\\n        ErrorDTO expectedError = new ErrorDTO()\\n            .setCode(ValidationException.CODE_ERROR)\\n            .addError(\\\"email\\\", \\\"must be a well-formed email address\\\")\\n            .addError(\\\"cpf\\\", \\\"value already registered\\\");\\n        assertValidationError(invalidUser, expectedError);\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"73:77\",\n    \"73:77\": true\n  }), \"class UserIT extends AbstractIT {\\n\\n    private static String PUBLISHER_URI = \\\"http://mock.publisher/publish\\\";\\n    private static UUID DEFAULT_UUID = UUID.randomUUID();\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @MockBean\\n    private RestTemplate restTemplate;\\n\\n    @MockBean\\n    private UUIDGenerator uuidGenerator;\\n\\n    @BeforeEach\\n    void setUp() {\\n        when(uuidGenerator.generate()).thenReturn(DEFAULT_UUID);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Error to save user without any field filled\\\")\\n    void noFieldFilled() {\\n        CreateUserDTO userToSave = new CreateUserDTO();\\n        ErrorDTO expectedError = new ErrorDTO()\\n            .setCode(ValidationException.CODE_ERROR)\\n            .addError(\\\"name\\\", \\\"must not be blank\\\")\\n            .addError(\\\"cpf\\\", \\\"must not be null\\\")\\n            .addError(\\\"birthDate\\\", \\\"must not be null\\\");\\n        ResponseEntity<ErrorDTO> resp = userApiClient.save(userToSave, ErrorDTO.class);\\n        assertValidationError(userToSave, expectedError);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Error to save user with invalid e-mail, address, name, cpf and birth date\\\")\\n    void invalidEmailAddressNameCpfAndBirthDate() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setEmail(\\\"Goku > Naruto\\\")\\n            .setAddress(\\\"_\\\")\\n            .setCpf(\\\"bolacha ou biscoito?\\\")\\n            .setName(\\\"_\\\")\\n            .setBirthDate(LocalDate.now().plusDays(1));\\n        ErrorDTO expectedError = new ErrorDTO()\\n            .setCode(ValidationException.CODE_ERROR)\\n            .addError(\\\"address\\\", \\\"size must be between 5 and 254\\\")\\n            .addError(\\\"name\\\", \\\"size must be between 3 and 90\\\")\\n            .addError(\\\"cpf\\\", \\\"invalid Brazilian individual taxpayer registry number (CPF)\\\")\\n            .addError(\\\"email\\\", \\\"must be a well-formed email address\\\")\\n            .addError(\\\"birthDate\\\", \\\"must be a date in the past or in the present\\\");\\n        ResponseEntity<ErrorDTO> resp = userApiClient.save(userToSave, ErrorDTO.class);\\n        assertValidationError(userToSave, expectedError);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Error to save user with invalid e-mail and repeated cpf\\\")\\n    void invalidEmailAndRepeatedCpf() {\\n        CreateUserDTO validUser = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        assertSaveUserSuccessfully(validUser);\\n        CreateUserDTO invalidUser = validUser.withEmail(\\\"ronaldo\\\");\\n        ErrorDTO expectedError = new ErrorDTO()\\n            .setCode(ValidationException.CODE_ERROR)\\n            .addError(\\\"email\\\", \\\"must be a well-formed email address\\\")\\n            .addError(\\\"cpf\\\", \\\"value already registered\\\");\\n        assertValidationError(invalidUser, expectedError);\\n    }\\n\\n    private void assertValidationError(CreateUserDTO user, ErrorDTO error) {\\n        ResponseEntity<ErrorDTO> resp = userApiClient.save(user, ErrorDTO.class);\\n        assertThat(resp.getStatusCode()).isEqualTo(BAD_REQUEST);\\n        assertThat(resp.getBody()).isEqualTo(error);\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"75\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"75\"\n  }), \"class UserIT extends AbstractIT {\\n\\n    private static String PUBLISHER_URI = \\\"http://mock.publisher/publish\\\";\\n    private static UUID DEFAULT_UUID = UUID.randomUUID();\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @MockBean\\n    private RestTemplate restTemplate;\\n\\n    @MockBean\\n    private UUIDGenerator uuidGenerator;\\n\\n    @BeforeEach\\n    void setUp() {\\n        when(uuidGenerator.generate()).thenReturn(DEFAULT_UUID);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Error to save user without any field filled\\\")\\n    void noFieldFilled() {\\n        CreateUserDTO userToSave = new CreateUserDTO();\\n        ErrorDTO expectedError = new ErrorDTO()\\n            .setCode(ValidationException.CODE_ERROR)\\n            .addError(\\\"name\\\", \\\"must not be blank\\\")\\n            .addError(\\\"cpf\\\", \\\"must not be null\\\")\\n            .addError(\\\"birthDate\\\", \\\"must not be null\\\");\\n        ResponseEntity<ErrorDTO> resp = userApiClient.save(userToSave, ErrorDTO.class);\\n        assertValidationError(userToSave, expectedError);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Error to save user with invalid e-mail, address, name, cpf and birth date\\\")\\n    void invalidEmailAddressNameCpfAndBirthDate() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setEmail(\\\"Goku > Naruto\\\")\\n            .setAddress(\\\"_\\\")\\n            .setCpf(\\\"bolacha ou biscoito?\\\")\\n            .setName(\\\"_\\\")\\n            .setBirthDate(LocalDate.now().plusDays(1));\\n        ErrorDTO expectedError = new ErrorDTO()\\n            .setCode(ValidationException.CODE_ERROR)\\n            .addError(\\\"address\\\", \\\"size must be between 5 and 254\\\")\\n            .addError(\\\"name\\\", \\\"size must be between 3 and 90\\\")\\n            .addError(\\\"cpf\\\", \\\"invalid Brazilian individual taxpayer registry number (CPF)\\\")\\n            .addError(\\\"email\\\", \\\"must be a well-formed email address\\\")\\n            .addError(\\\"birthDate\\\", \\\"must be a date in the past or in the present\\\");\\n        ResponseEntity<ErrorDTO> resp = userApiClient.save(userToSave, ErrorDTO.class);\\n        assertValidationError(userToSave, expectedError);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Error to save user with invalid e-mail and repeated cpf\\\")\\n    void invalidEmailAndRepeatedCpf() {\\n        CreateUserDTO validUser = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        assertSaveUserSuccessfully(validUser);\\n        CreateUserDTO invalidUser = validUser.withEmail(\\\"ronaldo\\\");\\n        ErrorDTO expectedError = new ErrorDTO()\\n            .setCode(ValidationException.CODE_ERROR)\\n            .addError(\\\"email\\\", \\\"must be a well-formed email address\\\")\\n            .addError(\\\"cpf\\\", \\\"value already registered\\\");\\n        assertValidationError(invalidUser, expectedError);\\n    }\\n\\n    private void assertValidationError(CreateUserDTO user, ErrorDTO error) {\\n        ResponseEntity<ErrorDTO> resp = userApiClient.save(user, ErrorDTO.class);\\n        verifyNoMoreInteractions(restTemplate);\\n        assertThat(resp.getStatusCode()).isEqualTo(BAD_REQUEST);\\n        assertThat(resp.getBody()).isEqualTo(error);\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"75\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"75 title=\\\"Mas porque verifyNoMoreInteractions?\\\"\",\n    \"title\": \"\\\"Mas\",\n    \"porque\": true,\n    \"verifyNoMoreInteractions?\\\"\": true\n  }), \"class UserIT extends AbstractIT {\\n\\n    private static String PUBLISHER_URI = \\\"http://mock.publisher/publish\\\";\\n    private static UUID DEFAULT_UUID = UUID.randomUUID();\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @MockBean\\n    private RestTemplate restTemplate;\\n\\n    @MockBean\\n    private UUIDGenerator uuidGenerator;\\n\\n    @BeforeEach\\n    void setUp() {\\n        when(uuidGenerator.generate()).thenReturn(DEFAULT_UUID);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Error to save user without any field filled\\\")\\n    void noFieldFilled() {\\n        CreateUserDTO userToSave = new CreateUserDTO();\\n        ErrorDTO expectedError = new ErrorDTO()\\n            .setCode(ValidationException.CODE_ERROR)\\n            .addError(\\\"name\\\", \\\"must not be blank\\\")\\n            .addError(\\\"cpf\\\", \\\"must not be null\\\")\\n            .addError(\\\"birthDate\\\", \\\"must not be null\\\");\\n        ResponseEntity<ErrorDTO> resp = userApiClient.save(userToSave, ErrorDTO.class);\\n        assertValidationError(userToSave, expectedError);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Error to save user with invalid e-mail, address, name, cpf and birth date\\\")\\n    void invalidEmailAddressNameCpfAndBirthDate() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setEmail(\\\"Goku > Naruto\\\")\\n            .setAddress(\\\"_\\\")\\n            .setCpf(\\\"bolacha ou biscoito?\\\")\\n            .setName(\\\"_\\\")\\n            .setBirthDate(LocalDate.now().plusDays(1));\\n        ErrorDTO expectedError = new ErrorDTO()\\n            .setCode(ValidationException.CODE_ERROR)\\n            .addError(\\\"address\\\", \\\"size must be between 5 and 254\\\")\\n            .addError(\\\"name\\\", \\\"size must be between 3 and 90\\\")\\n            .addError(\\\"cpf\\\", \\\"invalid Brazilian individual taxpayer registry number (CPF)\\\")\\n            .addError(\\\"email\\\", \\\"must be a well-formed email address\\\")\\n            .addError(\\\"birthDate\\\", \\\"must be a date in the past or in the present\\\");\\n        ResponseEntity<ErrorDTO> resp = userApiClient.save(userToSave, ErrorDTO.class);\\n        assertValidationError(userToSave, expectedError);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Error to save user with invalid e-mail and repeated cpf\\\")\\n    void invalidEmailAndRepeatedCpf() {\\n        CreateUserDTO validUser = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        assertSaveUserSuccessfully(validUser);\\n        CreateUserDTO invalidUser = validUser.withEmail(\\\"ronaldo\\\");\\n        ErrorDTO expectedError = new ErrorDTO()\\n            .setCode(ValidationException.CODE_ERROR)\\n            .addError(\\\"email\\\", \\\"must be a well-formed email address\\\")\\n            .addError(\\\"cpf\\\", \\\"value already registered\\\");\\n        assertValidationError(invalidUser, expectedError);\\n    }\\n\\n    private void assertValidationError(CreateUserDTO user, ErrorDTO error) {\\n        ResponseEntity<ErrorDTO> resp = userApiClient.save(user, ErrorDTO.class);\\n        verifyNoMoreInteractions(restTemplate);\\n        assertThat(resp.getStatusCode()).isEqualTo(BAD_REQUEST);\\n        assertThat(resp.getBody()).isEqualTo(error);\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"75\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"75 title=\\\"Para garantir que os testes possam fazer alguma verificação antes\\\"\",\n    \"title\": \"\\\"Para\",\n    \"garantir\": true,\n    \"que\": true,\n    \"os\": true,\n    \"testes\": true,\n    \"possam\": true,\n    \"fazer\": true,\n    \"alguma\": true,\n    \"verificação\": true,\n    \"antes\\\"\": true\n  }), \"class UserIT extends AbstractIT {\\n\\n    private static String PUBLISHER_URI = \\\"http://mock.publisher/publish\\\";\\n    private static UUID DEFAULT_UUID = UUID.randomUUID();\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @MockBean\\n    private RestTemplate restTemplate;\\n\\n    @MockBean\\n    private UUIDGenerator uuidGenerator;\\n\\n    @BeforeEach\\n    void setUp() {\\n        when(uuidGenerator.generate()).thenReturn(DEFAULT_UUID);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Error to save user without any field filled\\\")\\n    void noFieldFilled() {\\n        CreateUserDTO userToSave = new CreateUserDTO();\\n        ErrorDTO expectedError = new ErrorDTO()\\n            .setCode(ValidationException.CODE_ERROR)\\n            .addError(\\\"name\\\", \\\"must not be blank\\\")\\n            .addError(\\\"cpf\\\", \\\"must not be null\\\")\\n            .addError(\\\"birthDate\\\", \\\"must not be null\\\");\\n        ResponseEntity<ErrorDTO> resp = userApiClient.save(userToSave, ErrorDTO.class);\\n        assertValidationError(userToSave, expectedError);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Error to save user with invalid e-mail, address, name, cpf and birth date\\\")\\n    void invalidEmailAddressNameCpfAndBirthDate() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setEmail(\\\"Goku > Naruto\\\")\\n            .setAddress(\\\"_\\\")\\n            .setCpf(\\\"bolacha ou biscoito?\\\")\\n            .setName(\\\"_\\\")\\n            .setBirthDate(LocalDate.now().plusDays(1));\\n        ErrorDTO expectedError = new ErrorDTO()\\n            .setCode(ValidationException.CODE_ERROR)\\n            .addError(\\\"address\\\", \\\"size must be between 5 and 254\\\")\\n            .addError(\\\"name\\\", \\\"size must be between 3 and 90\\\")\\n            .addError(\\\"cpf\\\", \\\"invalid Brazilian individual taxpayer registry number (CPF)\\\")\\n            .addError(\\\"email\\\", \\\"must be a well-formed email address\\\")\\n            .addError(\\\"birthDate\\\", \\\"must be a date in the past or in the present\\\");\\n        ResponseEntity<ErrorDTO> resp = userApiClient.save(userToSave, ErrorDTO.class);\\n        assertValidationError(userToSave, expectedError);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Error to save user with invalid e-mail and repeated cpf\\\")\\n    void invalidEmailAndRepeatedCpf() {\\n        CreateUserDTO validUser = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        assertSaveUserSuccessfully(validUser);\\n        CreateUserDTO invalidUser = validUser.withEmail(\\\"ronaldo\\\");\\n        ErrorDTO expectedError = new ErrorDTO()\\n            .setCode(ValidationException.CODE_ERROR)\\n            .addError(\\\"email\\\", \\\"must be a well-formed email address\\\")\\n            .addError(\\\"cpf\\\", \\\"value already registered\\\");\\n        assertValidationError(invalidUser, expectedError);\\n    }\\n\\n    private void assertValidationError(CreateUserDTO user, ErrorDTO error) {\\n        ResponseEntity<ErrorDTO> resp = userApiClient.save(user, ErrorDTO.class);\\n        verifyNoMoreInteractions(restTemplate);\\n        assertThat(resp.getStatusCode()).isEqualTo(BAD_REQUEST);\\n        assertThat(resp.getBody()).isEqualTo(error);\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"56\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"56 title=\\\"O teste de CPF repetido é um bom exemplo\\\"\",\n    \"title\": \"\\\"O\",\n    \"teste\": true,\n    \"de\": true,\n    \"CPF\": true,\n    \"repetido\": true,\n    \"é\": true,\n    \"um\": true,\n    \"bom\": true,\n    \"exemplo\\\"\": true\n  }), \"class UserIT extends AbstractIT {\\n\\n    private static String PUBLISHER_URI = \\\"http://mock.publisher/publish\\\";\\n    private static UUID DEFAULT_UUID = UUID.randomUUID();\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @MockBean\\n    private RestTemplate restTemplate;\\n\\n    @MockBean\\n    private UUIDGenerator uuidGenerator;\\n\\n    @BeforeEach\\n    void setUp() {\\n        when(uuidGenerator.generate()).thenReturn(DEFAULT_UUID);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Error to save user without any field filled\\\")\\n    void noFieldFilled() {\\n        CreateUserDTO userToSave = new CreateUserDTO();\\n        ErrorDTO expectedError = new ErrorDTO()\\n            .setCode(ValidationException.CODE_ERROR)\\n            .addError(\\\"name\\\", \\\"must not be blank\\\")\\n            .addError(\\\"cpf\\\", \\\"must not be null\\\")\\n            .addError(\\\"birthDate\\\", \\\"must not be null\\\");\\n        ResponseEntity<ErrorDTO> resp = userApiClient.save(userToSave, ErrorDTO.class);\\n        assertValidationError(userToSave, expectedError);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Error to save user with invalid e-mail, address, name, cpf and birth date\\\")\\n    void invalidEmailAddressNameCpfAndBirthDate() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setEmail(\\\"Goku > Naruto\\\")\\n            .setAddress(\\\"_\\\")\\n            .setCpf(\\\"bolacha ou biscoito?\\\")\\n            .setName(\\\"_\\\")\\n            .setBirthDate(LocalDate.now().plusDays(1));\\n        ErrorDTO expectedError = new ErrorDTO()\\n            .setCode(ValidationException.CODE_ERROR)\\n            .addError(\\\"address\\\", \\\"size must be between 5 and 254\\\")\\n            .addError(\\\"name\\\", \\\"size must be between 3 and 90\\\")\\n            .addError(\\\"cpf\\\", \\\"invalid Brazilian individual taxpayer registry number (CPF)\\\")\\n            .addError(\\\"email\\\", \\\"must be a well-formed email address\\\")\\n            .addError(\\\"birthDate\\\", \\\"must be a date in the past or in the present\\\");\\n        ResponseEntity<ErrorDTO> resp = userApiClient.save(userToSave, ErrorDTO.class);\\n        assertValidationError(userToSave, expectedError);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Error to save user with invalid e-mail and repeated cpf\\\")\\n    void invalidEmailAndRepeatedCpf() {\\n        CreateUserDTO validUser = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        assertSaveUserSuccessfully(validUser);\\n        CreateUserDTO invalidUser = validUser.withEmail(\\\"ronaldo\\\");\\n        ErrorDTO expectedError = new ErrorDTO()\\n            .setCode(ValidationException.CODE_ERROR)\\n            .addError(\\\"email\\\", \\\"must be a well-formed email address\\\")\\n            .addError(\\\"cpf\\\", \\\"value already registered\\\");\\n        assertValidationError(invalidUser, expectedError);\\n    }\\n\\n    private void assertValidationError(CreateUserDTO user, ErrorDTO error) {\\n        ResponseEntity<ErrorDTO> resp = userApiClient.save(user, ErrorDTO.class);\\n        verifyNoMoreInteractions(restTemplate);\\n        assertThat(resp.getStatusCode()).isEqualTo(BAD_REQUEST);\\n        assertThat(resp.getBody()).isEqualTo(error);\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"64\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"64 title=\\\"Dentro desse assert é feito um verify do primeiro usuário salvo\\\"\",\n    \"title\": \"\\\"Dentro\",\n    \"desse\": true,\n    \"assert\": true,\n    \"é\": true,\n    \"feito\": true,\n    \"um\": true,\n    \"verify\": true,\n    \"do\": true,\n    \"primeiro\": true,\n    \"usuário\": true,\n    \"salvo\\\"\": true\n  }), \"class UserIT extends AbstractIT {\\n\\n    private static String PUBLISHER_URI = \\\"http://mock.publisher/publish\\\";\\n    private static UUID DEFAULT_UUID = UUID.randomUUID();\\n\\n    private final Faker faker = new Faker();\\n\\n    @Autowired\\n    private UserApiClient userApiClient;\\n\\n    @MockBean\\n    private RestTemplate restTemplate;\\n\\n    @MockBean\\n    private UUIDGenerator uuidGenerator;\\n\\n    @BeforeEach\\n    void setUp() {\\n        when(uuidGenerator.generate()).thenReturn(DEFAULT_UUID);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Error to save user without any field filled\\\")\\n    void noFieldFilled() {\\n        CreateUserDTO userToSave = new CreateUserDTO();\\n        ErrorDTO expectedError = new ErrorDTO()\\n            .setCode(ValidationException.CODE_ERROR)\\n            .addError(\\\"name\\\", \\\"must not be blank\\\")\\n            .addError(\\\"cpf\\\", \\\"must not be null\\\")\\n            .addError(\\\"birthDate\\\", \\\"must not be null\\\");\\n        ResponseEntity<ErrorDTO> resp = userApiClient.save(userToSave, ErrorDTO.class);\\n        assertValidationError(userToSave, expectedError);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Error to save user with invalid e-mail, address, name, cpf and birth date\\\")\\n    void invalidEmailAddressNameCpfAndBirthDate() {\\n        CreateUserDTO userToSave = new CreateUserDTO()\\n            .setEmail(\\\"Goku > Naruto\\\")\\n            .setAddress(\\\"_\\\")\\n            .setCpf(\\\"bolacha ou biscoito?\\\")\\n            .setName(\\\"_\\\")\\n            .setBirthDate(LocalDate.now().plusDays(1));\\n        ErrorDTO expectedError = new ErrorDTO()\\n            .setCode(ValidationException.CODE_ERROR)\\n            .addError(\\\"address\\\", \\\"size must be between 5 and 254\\\")\\n            .addError(\\\"name\\\", \\\"size must be between 3 and 90\\\")\\n            .addError(\\\"cpf\\\", \\\"invalid Brazilian individual taxpayer registry number (CPF)\\\")\\n            .addError(\\\"email\\\", \\\"must be a well-formed email address\\\")\\n            .addError(\\\"birthDate\\\", \\\"must be a date in the past or in the present\\\");\\n        ResponseEntity<ErrorDTO> resp = userApiClient.save(userToSave, ErrorDTO.class);\\n        assertValidationError(userToSave, expectedError);\\n    }\\n\\n    @Test\\n    @DisplayName(\\\"Error to save user with invalid e-mail and repeated cpf\\\")\\n    void invalidEmailAndRepeatedCpf() {\\n        CreateUserDTO validUser = new CreateUserDTO()\\n            .setCpf(CPF.generate())\\n            .setName(faker.howIMetYourMother().character())\\n            .setBirthDate(LocalDate.now())\\n            .setAddress(faker.address().fullAddress())\\n            .setEmail(faker.internet().emailAddress());\\n        assertSaveUserSuccessfully(validUser);\\n        CreateUserDTO invalidUser = validUser.withEmail(\\\"ronaldo\\\");\\n        ErrorDTO expectedError = new ErrorDTO()\\n            .setCode(ValidationException.CODE_ERROR)\\n            .addError(\\\"email\\\", \\\"must be a well-formed email address\\\")\\n            .addError(\\\"cpf\\\", \\\"value already registered\\\");\\n        assertValidationError(invalidUser, expectedError);\\n    }\\n\\n    private void assertValidationError(CreateUserDTO user, ErrorDTO error) {\\n        ResponseEntity<ErrorDTO> resp = userApiClient.save(user, ErrorDTO.class);\\n        verifyNoMoreInteractions(restTemplate);\\n        assertThat(resp.getStatusCode()).isEqualTo(BAD_REQUEST);\\n        assertThat(resp.getBody()).isEqualTo(error);\\n    }\\n\"))), mdx(\"hr\", null), mdx(Background, {\n    mdxType: \"Background\"\n  }), mdx(L.Row, null, mdx(Done, {\n    style: {\n      height: \"200px\"\n    },\n    mdxType: \"Done\"\n  }), mdx(\"h3\", {\n    style: {\n      color: \"gray\"\n    }\n  }, \"Testado o n\\xE3o envio de eventos nos fluxos de erro!\")), mdx(\"hr\", null), mdx(L.Column, null, mdx(\"h2\", null, \"Mas ainda tem como melhorar o c\\xF3digo de teste?\"), mdx(\"img\", {\n    style: {\n      height: \"75%\"\n    },\n    src: BusinessManThinking\n  })), mdx(\"hr\", null), mdx(L.Column, null, mdx(\"h1\", null, \"Sempre tem n\\xE9 \\uD83D\\uDE02\\uD83D\\uDE02\")), mdx(\"hr\", null), mdx(L.Column, null, mdx(\"h1\", null, \"Test Data Builder\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\xC9 um pattern\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"E auxilia na constru\\xE7\\xE3o de dados para os testes\")))), mdx(\"hr\", null), mdx(Surfer, {\n    mdxType: \"Surfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"@Test\\n@DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\nvoid allFieldsFilledProperly() {\\n    CreateUserDTO userToSave = new CreateUserDTO()\\n        .setCpf(CPF.generate())\\n        .setName(faker.howIMetYourMother().character())\\n        .setBirthDate(LocalDate.now())\\n        .setAddress(faker.address().fullAddress())\\n        .setEmail(faker.internet().emailAddress());\\n    assertSaveUserSuccessfully(userToSave);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"4:9 title=\\\"O que estamos tentando querer dizer aqui?\\\"\",\n    \"4:9\": true,\n    \"title\": \"\\\"O\",\n    \"que\": true,\n    \"estamos\": true,\n    \"tentando\": true,\n    \"querer\": true,\n    \"dizer\": true,\n    \"aqui?\\\"\": true\n  }), \"@Test\\n@DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\nvoid allFieldsFilledProperly() {\\n    CreateUserDTO userToSave = new CreateUserDTO()\\n        .setCpf(CPF.generate())\\n        .setName(faker.howIMetYourMother().character())\\n        .setBirthDate(LocalDate.now())\\n        .setAddress(faker.address().fullAddress())\\n        .setEmail(faker.internet().emailAddress());\\n    assertSaveUserSuccessfully(userToSave);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"4\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"4 title=\\\"Poderíamos fazer assim\\\"\",\n    \"title\": \"\\\"Poderíamos\",\n    \"fazer\": true,\n    \"assim\\\"\": true\n  }), \"@Test\\n@DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\nvoid allFieldsFilledProperly() {\\n    CreateUserDTO validUser = createValidUser();\\n    assertSaveUserSuccessfully(userToSave);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"4\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"4\"\n  }), \"@Test\\n@DisplayName(\\\"Save and get user with all fields filled successfully\\\")\\nvoid allFieldsFilledProperly() {\\n    assertSaveUserSuccessfully(createValidUser());\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"@Test\\n@DisplayName(\\\"Save and get user with just required fields filled successfully\\\")\\nvoid requiredFieldsFilled() {\\n    CreateUserDTO userToSave = new CreateUserDTO()\\n        .setCpf(CPF.generate())\\n        .setName(faker.name().fullName())\\n        .setBirthDate(LocalDate.now());\\n    assertSaveUserSuccessfully(userToSave);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"4:7 title=\\\"O que estamos tentando querer dizer aqui?\\\"\",\n    \"4:7\": true,\n    \"title\": \"\\\"O\",\n    \"que\": true,\n    \"estamos\": true,\n    \"tentando\": true,\n    \"querer\": true,\n    \"dizer\": true,\n    \"aqui?\\\"\": true\n  }), \"@Test\\n@DisplayName(\\\"Save and get user with just required fields filled successfully\\\")\\nvoid requiredFieldsFilled() {\\n    CreateUserDTO userToSave = new CreateUserDTO()\\n        .setCpf(CPF.generate())\\n        .setName(faker.name().fullName())\\n        .setBirthDate(LocalDate.now());\\n    assertSaveUserSuccessfully(userToSave);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"4\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"4\"\n  }), \"@Test\\n@DisplayName(\\\"Save and get user with just required fields filled successfully\\\")\\nvoid requiredFieldsFilled() {\\n    CreateUserDTO minimumValidUserToSave = createMinimumValidUserToSave();\\n    assertSaveUserSuccessfully(minimumValidUserToSave);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"4\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"4\"\n  }), \"@Test\\n@DisplayName(\\\"Save and get user with just required fields filled successfully\\\")\\nvoid requiredFieldsFilled() {\\n    assertSaveUserSuccessfully(createMinimumValidUserToSave());\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"4\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"4 title=\\\"Esse código de construção deve estar em uma classe separada\\\"\",\n    \"title\": \"\\\"Esse\",\n    \"código\": true,\n    \"de\": true,\n    \"construção\": true,\n    \"deve\": true,\n    \"estar\": true,\n    \"em\": true,\n    \"uma\": true,\n    \"classe\": true,\n    \"separada\\\"\": true\n  }), \"@Test\\n@DisplayName(\\\"Save and get user with just required fields filled successfully\\\")\\nvoid requiredFieldsFilled() {\\n    assertSaveUserSuccessfully(createMinimumValidUserToSave());\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"public class UserDataFactory {\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"public class UserDataFactory {\\n    public static CreateUserDTO createValidUser() {...}\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"public class UserDataFactory {\\n    public static CreateUserDTO createValidUser() {...}\\n\\n    public static CreateUserDTO createMinimumValidUserToSave() {...}\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"public class UserDataFactory {\\n    public static CreateUserDTO createValidUser() {...}\\n\\n    public static CreateUserDTO createMinimumValidUserToSave() {...}\\n\\n    // outro m\\xE9todos\\n}\\n\"))), mdx(\"hr\", null), mdx(L.Column, null, mdx(\"h1\", null, \"Test Data Builder Conclus\\xE3o\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Deixa os testes mais clean\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Melhora a legibilidade do c\\xF3digo\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Possibilita reutilizar o c\\xF3digo de constru\\xE7\\xE3o de dados entre os testes\")))), mdx(\"hr\", null), mdx(L.Column, null, mdx(\"h1\", null, \"Testes e2e  Conclus\\xE3o\")), mdx(\"hr\", null), mdx(L.Column, null, mdx(\"h2\", null, \"Vantagens\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Garante o funcionamento da aplica\\xE7\\xE3o como um todo\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Consegue simular o mesmo comportamento do sistema em produ\\xE7\\xE3o\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Auxilia em refactors maiores\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Pode ser escrito em uma linguagem diferente da do c\\xF3digo de produ\\xE7\\xE3o\")))), mdx(\"hr\", null), mdx(L.Column, null, mdx(\"h2\", null, \"Desvantagens\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"S\\xE3o lentos para serem executados\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Depedendo do tamanho do teste pode ser d\\xEDficil saber exatamente aonde est\\xE1 o erro\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Necessita de muito c\\xF3digo de configura\\xE7\\xE3o\")))), mdx(\"hr\", null), mdx(L.Column, null, mdx(\"h1\", null, \"Testes E2E\"), mdx(\"h2\", null, \"VS\"), mdx(\"h1\", null, \"Testes Unit\\xE1rios\")), mdx(\"hr\", null), mdx(Background, {\n    mdxType: \"Background\"\n  }), mdx(\"h1\", null, \"D\\xFAvidas?\"), mdx(\"hr\", null));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"matchPath":"/*","id":"59c4a715-a45d-5dd7-905f-ebfbb61f1674","slug":"/testse2eworkshop-presentation","title":"Testes e2e com Spring boot"}},"staticQueryHashes":[]}